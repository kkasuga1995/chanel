<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KeyToKey.Plugins</name>
    </assembly>
    <members>
        <member name="T:KeyToKey.Plugins.Bounds">
            <summary>
            位置と範囲
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.Bounds.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            コンストラクタ
            </summary>
            <param name="left">横の位置</param>
            <param name="top">縦の位置</param>
            <param name="width">横の範囲</param>
            <param name="height">縦の範囲</param>
        </member>
        <member name="M:KeyToKey.Plugins.Bounds.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            コンストラクタ
            </summary>
            <param name="left">横の位置</param>
            <param name="top">縦の位置</param>
            <param name="width">横の範囲</param>
            <param name="height">縦の範囲</param>
        </member>
        <member name="P:KeyToKey.Plugins.Bounds.Left">
            <summary>
            横の位置
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.Bounds.Top">
            <summary>
            縦の位置
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.Bounds.Width">
            <summary>
            横の範囲
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.Bounds.Height">
            <summary>
            縦の範囲
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.Bounds.Bottom">
            <summary>
            読み取り専用：Top + Height
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.Bounds.Right">
            <summary>
            読み取り専用: Left + Width
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.Bounds.CenterX">
            <summary>
            Boundsの縦の中心位置
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.Bounds.CenterY">
            <summary>
            Boundsの横の中心位置
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.Bounds.ToTuple">
            <summary>
            位置と範囲をタプルで返します。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.Bounds.ToTupleAsDouble">
            <summary>
            位置と範囲をdouble型のタプルで返します。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.Bounds.ToCenter">
            <summary>
            Boundsを小さくリサイズして元のBoundsの中央に表示します。
            </summary>
            <returns>新しいBoundsインスタンス</returns>
        </member>
        <member name="M:KeyToKey.Plugins.Bounds.ToEvenNumber">
            <summary>
            現在の範囲を偶数にします。
            </summary>
            <returns>新しいBoundsインスタンス</returns>
        </member>
        <member name="M:KeyToKey.Plugins.Bounds.ToOddNumber">
            <summary>
            現在の範囲を奇数にします。
            </summary>
            <returns>新しいBoundsインスタンス</returns>
        </member>
        <member name="M:KeyToKey.Plugins.Bounds.IsInsideOf(KeyToKey.Plugins.Bounds)">
            <summary>
            指定したBoundsの範囲内にあるかどうかを取得します。
            </summary>
            <param name="bounds">bounds</param>
            <returns>範囲内にあるかどうか</returns>
        </member>
        <member name="M:KeyToKey.Plugins.Bounds.Intersect(KeyToKey.Plugins.Bounds)">
            <summary>
            2つのBoundsの公差する範囲を取得します。
            </summary>
            <param name="bounds">bounds</param>
            <returns>公差する範囲</returns>
        </member>
        <member name="M:KeyToKey.Plugins.Bounds.IntersectsWith(KeyToKey.Plugins.Bounds)">
            <summary>
            2つBoundsが公差するかどうかを取得します。
            </summary>
            <param name="bounds">bounds</param>
            <returns>Boundsが公差するかどうか</returns>
        </member>
        <member name="M:KeyToKey.Plugins.Bounds.Union(KeyToKey.Plugins.Bounds)">
            <summary>
            2つのBoundsの結合領域を包むBoundsを取得します。
            </summary>
            <param name="bounds"></param>
            <returns>2つのBoundsの結合領域を包むBounds</returns>
        </member>
        <member name="M:KeyToKey.Plugins.Bounds.op_Equality(KeyToKey.Plugins.Bounds,KeyToKey.Plugins.Bounds)">
            <summary>
            2つのBoundsが等しいかどうかを評価します。
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:KeyToKey.Plugins.Bounds.op_Inequality(KeyToKey.Plugins.Bounds,KeyToKey.Plugins.Bounds)">
            <summary>
            2つのBoundsが等しくないかどうかを評価します。
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:KeyToKey.Plugins.Bounds.op_Addition(KeyToKey.Plugins.Bounds,KeyToKey.Plugins.Bounds)">
            <summary>
            2つのBoundsを足し算します。
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:KeyToKey.Plugins.Bounds.op_Subtraction(KeyToKey.Plugins.Bounds,KeyToKey.Plugins.Bounds)">
            <summary>
            2つのBoundsを引き算します。
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:KeyToKey.Plugins.BroadcastReceivedEventArgs">
            <summary>
            BroadcastReceivedの引数
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.BroadcastReceivedEventArgs.Channel">
            <summary>
            チャンネル
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.BroadcastReceivedEventArgs.Message">
            <summary>
            値
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.BroadcastReceivedEventArgs.#ctor(System.String,System.String)">
            <summary>
            ctr
            </summary>
            <param name="channel">チャンネル</param>
            <param name="value">値</param>
        </member>
        <member name="T:KeyToKey.Plugins.IPlugin">
            <summary>
            プラグイン
            </summary>
        </member>
        <member name="T:KeyToKey.Plugins.SettingsProvider">
            <summary>
            編集中の値や設定を提供するクラスです。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.SettingsProvider.EditingValue">
            <summary>
            編集中の値
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.SettingsProvider.Current">
            <summary>
            現在選択しているマクロ設定
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.SettingsProvider.Macros">
            <summary>
            マクロのリスト
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.SettingsProvider.GlobalVariables">
            <summary>
            グローバル変数のリスト
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.SettingsProvider.PathSelector">
            <summary>
            パス
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.SettingsProvider.TryParse``1(System.String,``0@)">
            <summary>
            KeyToKey側のルールで作られた値を解析・変換・取得します。
            なお、マクロの引数（ローカル変数）が値に含まれていると解析に失敗するので注意してください。
            </summary>
            <typeparam name="T">変換後の型</typeparam>
            <param name="value">解析する値</param>
            <param name="result">結果</param>
            <returns>解析が成功したか</returns>
        </member>
        <member name="M:KeyToKey.Plugins.SettingsProvider.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="EditingValue"></param>
        </member>
        <member name="T:KeyToKey.Plugins.SettingsProvider.Macro">
            <summary>
            マクロの設定
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.SettingsProvider.Macro.Name">
            <summary>
            マクロの名前
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.SettingsProvider.Macro.Parameters">
            <summary>
            マクロの引数
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.SettingsProvider.Macro.Actions">
            <summary>
            マクロのアクションリスト
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.SettingsProvider.Macro.LocalVariables">
            <summary>
            マクロのローカル変数
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.SettingsProvider.Macro.#ctor(System.String,System.Collections.Generic.IEnumerable{KeyToKey.Plugins.SettingsProvider.Parameter},System.Collections.Generic.IEnumerable{KeyToKey.Plugins.SettingsProvider.Action},System.Collections.Generic.IEnumerable{KeyToKey.Plugins.SettingsProvider.Variable})">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="parameters"></param>
            <param name="actions"></param>
            <param name="localVariables"></param>
        </member>
        <member name="T:KeyToKey.Plugins.SettingsProvider.Parameter">
            <summary>
            マクロで使用されている引数の設定
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.SettingsProvider.Parameter.TypeName">
            <summary>
            型の名前
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.SettingsProvider.Parameter.Name">
            <summary>
            変数の名前
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.SettingsProvider.Parameter.DefaultValue">
            <summary>
            初期値
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.SettingsProvider.Parameter.Description">
            <summary>
            概要
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.SettingsProvider.Parameter.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="typeName"></param>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <param name="description"></param>
        </member>
        <member name="T:KeyToKey.Plugins.SettingsProvider.Action">
            <summary>
            アクションの設定
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.SettingsProvider.Action.IsEnabled">
            <summary>
            アクションの有効／無効
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.SettingsProvider.Action.Name">
            <summary>
            アクションの名前（英語表記）
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.SettingsProvider.Action.Arguments">
            <summary>
            アクションの引数
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.SettingsProvider.Action.#ctor(System.Boolean,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            
            </summary>
            <param name="isEnabled"></param>
            <param name="name"></param>
            <param name="arguments"></param>
        </member>
        <member name="T:KeyToKey.Plugins.SettingsProvider.Variable">
            <summary>
            ローカル／グローバル変数共通の設定
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.SettingsProvider.Variable.Name">
            <summary>
            変数名
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.SettingsProvider.Variable.Syntax">
            <summary>
            値
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.SettingsProvider.Variable.IsExtern">
            <summary>
            外部ファイルの変数か
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.SettingsProvider.Variable.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="syntax"></param>
            <param name="isExtern"></param>
        </member>
        <member name="T:KeyToKey.Plugins.PluginAction">
            <summary>
            アクション
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.PluginAction.Name">
            <summary>
            アクションの名前（英語表記）
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.PluginAction.JpName">
            <summary>
            アクション名（日本語表記）
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.PluginAction.Description">
            <summary>
            アクションの概要
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.PluginAction.Category">
            <summary>
            カテゴリー
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.PluginAction.OnCreateArguments">
            <summary>
            アクションの引数
            </summary>
            <returns></returns>
        </member>
        <member name="M:KeyToKey.Plugins.PluginAction.OnExecute">
            <summary>
            アクション実行時に呼び出すメソッド
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.PluginAction.OnDispose(System.Boolean)">
            <summary>
            解放処理
            </summary>
            <param name="isTemporary">
            一時的な解放処理かどうかを示します。一時的な解放処理とはKeyToKeyが無効状態になったときや、許可されてないウィンドウがアクティブになったときに行われる解放処理のことを指します。<para/>
            </param>
        </member>
        <member name="T:KeyToKey.Plugins.PluginMethod">
            <summary>
            メソッド
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.PluginMethod.Name">
            <summary>
            アクションの名前（英語表記）
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.PluginMethod.Description">
            <summary>
            アクションの概要
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.PluginMethod.Category">
            <summary>
            カテゴリー
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.PluginMethod.ReturnType">
            <summary>
            戻り値の型：double, string, bool, Keys, MouseButton
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.PluginMethod.OnCreateArguments">
            <summary>
            アクションの引数
            </summary>
            <returns></returns>
        </member>
        <member name="M:KeyToKey.Plugins.PluginMethod.OnReturn">
            <summary>
            アクション実行時に呼び出すメソッド
            </summary>
        </member>
        <member name="T:KeyToKey.Plugins.Argument">
            <summary>
            引数の設定
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.Argument.Tag">
            <summary>
            引数を取得する際に使うタグ
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.Argument.Description">
            <summary>
            引数の概要
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.Argument.DefaultValue">
            <summary>
            デフォルトの値
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.Argument.DefaultDisplayText">
            <summary>
            値入力欄に表示するテキスト
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.Argument.Type">
            <summary>
            引数の型 : double, string, bool, Keys, MouseButton, object
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.Argument.Input">
            <summary>
            入力が必須か任意か
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.Argument.EnumValues">
            <summary>
            値入力欄右側にあるメニューアイコンのアイテム一覧
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.Argument.GetVariableName">
            <summary>
            変数を直接指定した場合に、変数名を取得できるようにします。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.Argument.#ctor(System.String,System.Type,System.Object,System.String,KeyToKey.Plugins.Inputs,System.String)">
            <summary>
            引数の設定
            </summary>
            <param name="Tag">引数を取得する際に使うタグ</param>
            <param name="Type">引数の型 : double, string, bool, Keys, MouseButton, object</param>
            <param name="DefaultValue">デフォルトの値</param>
            <param name="DefaultDisplayText">値入力欄に表示するテキスト</param>
            <param name="Input">入力が必須か任意か</param>
            <param name="Description">値の説明</param>
        </member>
        <member name="T:KeyToKey.Plugins.Inputs">
            <summary>入力</summary>
        </member>
        <member name="F:KeyToKey.Plugins.Inputs.Required">
            <summary>必須</summary>
        </member>
        <member name="F:KeyToKey.Plugins.Inputs.AllowIgnore">
            <summary>任意</summary>
        </member>
        <member name="T:KeyToKey.Plugins.EnumValue">
            <summary></summary>
        </member>
        <member name="P:KeyToKey.Plugins.EnumValue.DisplayText">
            <summary>表示テキスト</summary>
        </member>
        <member name="P:KeyToKey.Plugins.EnumValue.Callback">
            <summary>
            値を取得するためのデリゲート
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.EnumValue.#ctor(System.String,System.Func{KeyToKey.Plugins.SettingsProvider,System.String})">
            <summary>
            </summary>
            <param name="DisplayText">表示テキスト</param>
            <param name="Callback">値を取得するためのデリゲート</param>
        </member>
        <member name="T:KeyToKey.Plugins.PluginShortcut">
            <summary>
            ショートカットを実装するためのクラスです。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.PluginShortcut.Tag">
            <summary>
            ショートカットの識別タグ
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.PluginShortcut.Description">
            <summary>
            ショートカットの説明
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.PluginShortcut.Inputs">
            <summary>
            ショートカット
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.PluginShortcut.OnExecute">
            <summary>
            ショートカットが押されたときに実行する処理
            </summary>
        </member>
        <member name="T:KeyToKey.Plugins.NaturalStringComparer">
            <summary>
            自然なソートを提供します。
            </summary>
        </member>
        <member name="T:KeyToKey.Plugins.ControllerStateChangedEventArgs">
            <summary>
            ControllerStatusChanged
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.ControllerStateChangedEventArgs.Button">
            <summary>
            コントローラーのボタン
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.ControllerStateChangedEventArgs.IsPressed">
            <summary>
            押されているかどうか
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.ControllerStateChangedEventArgs.IsVirtualPadEvent">
            <summary>
            イベントがオンスクリーンコントローラーによるものかどうか
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.ControllerStateChangedEventArgs.#ctor(KeyToKey.Enums.ControllerButtons,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="Button"></param>
            <param name="IsPressed"></param>
            <param name="IsVirtualPadEvent"></param>
        </member>
        <member name="M:KeyToKey.Plugins.ControllerStateChangedEventArgs.#ctor(KeyToKey.Plugins.IGlobals,KeyToKey.Enums.ControllerButtons,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="Button"></param>
            <param name="IsPressed"></param>
            <param name="IsVirtualPadEvent"></param>
        </member>
        <member name="M:KeyToKey.Plugins.ControllerStateChangedEventArgs.Convert(KeyToKey.Enums.ControllerButtons,KeyToKey.Enums.Keys,KeyToKey.Enums.ControllerButtons[])">
            <summary>
            コントローラーの入力をキーの入力に変換します。
            </summary>
            <param name="from">対象とするキー</param>
            <param name="to">変換後のキー</param>
            <param name="modifiers">同時押しの入力</param>
        </member>
        <member name="M:KeyToKey.Plugins.ControllerStateChangedEventArgs.Convert(KeyToKey.Enums.ControllerButtons,KeyToKey.Enums.Keys,System.Func{System.Boolean})">
            <summary>
            コントローラーの入力をキーの入力に変換します。
            </summary>
            <param name="from">対象とするキー</param>
            <param name="to">変換後のキー</param>
            <param name="condition">追加の条件</param>
        </member>
        <member name="T:KeyToKey.Plugins.GlobalsBridge">
            <summary>
            C#スクリプトで使用できるメソッドとプロパティを実装します。
            </summary>
        </member>
        <member name="E:KeyToKey.Plugins.GlobalsBridge.IsEnabledChanged">
            <summary>
            IsEnabledの値が変わったら
            </summary>
        </member>
        <member name="E:KeyToKey.Plugins.GlobalsBridge.IsAvailableChanged">
            <summary>
            IsAvailableの値が変わったら
            </summary>
        </member>
        <member name="E:KeyToKey.Plugins.GlobalsBridge.CanWorkOnActiveWindowChanged">
            <summary>
            CanWorkOnActiveWindowの値が変わったら発生します。
            </summary>
        </member>
        <member name="E:KeyToKey.Plugins.GlobalsBridge.ShouldContinueChanged">
            <summary>
            ShouldContinueの値が変わったら
            </summary>
        </member>
        <member name="E:KeyToKey.Plugins.GlobalsBridge.TriggerReleased">
            <summary>
            トリガーが離されたら発生します。
            </summary>
        </member>
        <member name="E:KeyToKey.Plugins.GlobalsBridge.TriggerPressed">
            <summary>
            トリガーが押されたら発生します。
            </summary>
        </member>
        <member name="E:KeyToKey.Plugins.GlobalsBridge.Disposing">
            <summary>
            解放処理が実行されたら
            </summary>
        </member>
        <member name="E:KeyToKey.Plugins.GlobalsBridge.KeyPressed">
            <summary>
            キー／マウスのボタンが押されたら発生します。
            </summary>
        </member>
        <member name="E:KeyToKey.Plugins.GlobalsBridge.KeyReleased">
            <summary>
            キー／マウスのボタンが離されたら発生します。
            </summary>
        </member>
        <member name="E:KeyToKey.Plugins.GlobalsBridge.KeyStateChanged">
            <summary>
            キーが入力されたら
            </summary>
        </member>
        <member name="E:KeyToKey.Plugins.GlobalsBridge.ControllerStateChanged">
            <summary>
            コントローラーのボタンが入力されたら
            </summary>
        </member>
        <member name="E:KeyToKey.Plugins.GlobalsBridge.Hooked">
            <summary>
            キーボードとマウスが入力されたら発生します。
            </summary>
        </member>
        <member name="E:KeyToKey.Plugins.GlobalsBridge.MouseMoving">
            <summary>
            マウスが移動したら発生します。
            </summary>
        </member>
        <member name="E:KeyToKey.Plugins.GlobalsBridge.BroadcastReceived">
            <inheritdoc/>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Finalize">
            <summary>
            デストラクタ
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.#ctor(KeyToKey.Plugins.IGlobals)">
            <summary>
            コンストラクタ
            </summary>
            <param name="globals">C#スクリプトから使用する場合は「@this」や「@base」を渡してください。</param>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.SetProvider(KeyToKey.Plugins.IGlobals,KeyToKey.Plugins.IArgumentsProvider)">
            <summary>
            
            </summary>
            <param name="globals"></param>
            <param name="argumentsProvider"></param>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.this">
            <summary>
            KeyToKeyの基本的な機能を提供します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.base">
            <summary>
            KeyToKeyの基本的な機能を提供します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.ScriptConfig">
            <summary>
            スクリプトの設定
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.WaitConfig">
            <summary>
            待機処理の設定
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.MoveMethodOptions">
            <inheritdoc/>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.Profile">
            <summary>
            プロファイル
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.Key">
            <summary>
            キー
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.InjectedStatus">
            <summary>
            KeyToKeyが管理しているアプリケーションによって入力されたキーの状態
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.PhysicalStatus">
            <summary>
            KeyToKeyが管理している物理キーボード（ドライバ）によって入力されたキーの状態
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.Controller">
            <summary>
            コントローラー
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.MouseAsLeftStick">
            <summary>
            マウスで左スティックを動かす機能を提供します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.MouseAsRightStick">
            <summary>
            マウスで右スティックを動かす機能を提供します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.MouseVirtualPositionService">
            <summary>
            仮想的なマウスの座標や正規化された値を取得するためのサービスを提供します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.Clipboard">
            <summary>
            クリップボード
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.Window">
            <summary>
            ウィンドウ
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.IME">
            <summary>
            IME
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.TemplateMatching">
            <summary>
            テンプレートマッチング
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.Macro">
            <summary>
            マクロ
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.VirtualXInput">
            <summary>
            仮想XInputコントローラー
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.vJoy">
            <summary>
            vJoy
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.DualShock4">
            <summary>
            仮想DualShock4コントローラー
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.XInput">
            <summary>
            XInputコントローラー
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.QuickLauncher">
            <summary>
            クイックランチャー
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.SharedResources">
            <summary>
            リソースを保持しておくためのプロパティです。<para/>
            SharedResourcesの値は全プロファイルで共有されます。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.ShouldContinue">
            <summary>
            アクション／メソッドを続行するべきかどうかを取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.IsEnabled">
            <summary>
            KeyToKeyが有効状態かどうかを取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.IsTriggerReleased">
            <summary>
            トリガーが離されたかどうかを取得します。このプロパティは一度falseになったら再度トリガーが押されてもtrueになることはありません。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.CanStop">
            <summary>
            トリガーが離されたタイミングでマクロの実行を停止できるかどうかを取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.IsAvailable">
            <summary>
            現在のアクティブウィンドウで実行可能かどうかを取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.CanWorkOnActiveWindow">
            <summary>
            現在のアクティブウィンドウで実行可能かどうかを取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.Elapsed">
            <summary>
            アクションが呼ばれてからの経過時間を取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.Trigger">
            <summary>
            トリガー
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.Modifier">
            <summary>
            修飾子
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.KeyToKey#Plugins#IGlobals#IsEnabled">
            <summary>
            KeyToKeyが有効状態かどうかを取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.IsTriggerPressed">
            <summary>
            割り当てのトリガーが押されているかどうかを取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.IsModifiersPressed">
            <summary>
            割り当ての修飾キー／ボタンが押されているかどうかを取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.ActiveProcessName">
            <summary>
            アクティブになっているウィンドウのプロセス名を取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.ActiveWindowHandle">
            <summary>
            アクティブになっているウィンドウのウィンドウハンドルを取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.ActiveWindow">
            <summary>
            アクティブウィンドウのIWindowControllerを取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.WindowUnderCursor">
            <summary>
            カーソル下のウィンドウのIWindowControllerを取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.ConsoleWindow">
            <summary>
            コンソールウィンドウのIWindowControllerを取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.ActiveWindowBounds">
            <summary>
            アクティブになっているウィンドウの位置と範囲を取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.ActiveWindowClientBounds">
            <summary>
            アクティブになっているウィンドウのクライアント領域の位置と範囲を取得します。
            </summary>
            <returns>Boundsインスタンス（位置と範囲）</returns>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.LocalVariables">
            <summary>
            ローカル変数の操作取得を行います（ローカル変数には引数も含まれています）
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.GlobalVariables">
            <summary>
            グローバル変数の操作取得を行います。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.Screen">
            <summary>
            モニターの情報
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.IsMouseMovementBlocked">
            <summary>
            マウスの移動がブロックされているかどうかを取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.IsKeyboardHooked">
            <summary>
            キーボードがフックされているかどうかを取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.IsMouseHooked">
            <summary>
            マウスがフックされているかどうかを取得します。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.SendBroadcast(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.BlockKeys(KeyToKey.Enums.Keys[])">
            <summary>
            指定したキー（マウスのボタン入力、ホイールスクロールなども含まれます）をブロックします。ブロックはプロファイルが有効かつアクティブウィンドウで実行可能である場合に機能します。
            </summary>
            <param name="keys">ブロックするキー</param>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.BlockKeysWithout(KeyToKey.Enums.Keys[])">
            <summary>
            指定したキー以外のキー（マウスのボタン入力、ホイールスクロールなども含まれます）をブロックします。ブロックはプロファイルが有効かつアクティブウィンドウで実行可能である場合に機能します。
            </summary>
            <param name="keys">ブロックしないキー</param>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.BlockMouseMovement">
            <summary>
            マウスの移動をブロックします。ブロックはプロファイルが有効かつアクティブウィンドウで実行可能である場合に機能します。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.UnblockKeys(KeyToKey.Enums.Keys[])">
            <summary>
            指定したキーのブロックを解除します。
            </summary>
            <param name="keys">ブロックを解除するキー</param>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.UnblockKeysWithout(KeyToKey.Enums.Keys[])">
            <summary>
            指定したキー以外のキーのブロックを解除します。
            </summary>
            <param name="keys">ブロックを解除しないキー</param>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.UnblockAllKeys">
            <summary>
            すべてのキーのブロックを解除します。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.UnblockMouseMovement">
            <summary>
            マウスの移動のブロックを解除します。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.IsKeyBlocked(KeyToKey.Enums.Keys[])">
            <summary>
            キーがブロックされているかどうかを取得します。複数キーを指定した場合はすべてのキーがブロックされていたらtrueを返します。
            </summary>
            <param name="keys">キー</param>
            <returns>ブロックされているかどうか</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.GetParameter``1(System.String)">
            <summary>
            引数の値を取得します。
            </summary>
            <typeparam name="T">引数の型</typeparam>
            <param name="name">引数名</param>
            <returns>引数の値</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Wait(System.Int32)">
            <summary>
            指定した時間待機します。Cancelメソッドで待機をキャンセルできます。
            </summary>
            <returns>キャンセルされた場合はTrue</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Wait">
            <summary>
            キャンセルが実行されるまで待機します。
            </summary>
            <returns></returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Wait(System.TimeSpan)">
            <summary>
            指定した時間待機します。Cancelメソッドで待機をキャンセルできます。
            </summary>
            <returns>キャンセルされた場合はTrue</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.WaitForInput(KeyToKey.Enums.Keys,System.Boolean)">
            <summary>
            指定されたキーやマウスのボタンが入力されるまで待機します。
            </summary>
            <param name="key">キー</param>
            <param name="when">true:ダウン時, false:アップ時</param>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.WaitForInput(KeyToKey.Enums.Keys,KeyToKey.Enums.Keys,System.Boolean)">
            <summary>
            指定されたキーやマウスのボタンが入力されるまで待機します。
            </summary>
            <param name="key1">キー1</param>
            <param name="key2">キー2</param>
            <param name="when">true:ダウン時, false:アップ時</param>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.WaitForInput(KeyToKey.Enums.ControllerButtons,System.Boolean)">
            <summary>
            指定されたコントローラーのボタンが入力されるまで待機します。
            </summary>
            <param name="button">コントローラーのボタン</param>
            <param name="when">true:ダウン時, false:アップ時</param>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.WaitForInput(KeyToKey.Enums.ControllerButtons,KeyToKey.Enums.ControllerButtons,System.Boolean)">
            <summary>
            指定されたコントローラーのボタンが入力されるまで待機します。
            </summary>
            <param name="button1">コントローラーのボタン1</param>
            <param name="button2">コントローラーのボタン2</param>
            <param name="when">true:ダウン時, false:アップ時</param>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Cancel">
            <summary>
            Wait系メソッドをキャンセルします。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Invoke(System.Action)">
            <summary>
            UIスレッドで実行します。
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Invoke``1(System.Func{``0})">
            <summary>
            UIスレッドでデリゲートを実行し、戻り値を取得します。
            </summary>
            <typeparam name="T">任意の型</typeparam>
            <param name="callback">デリゲート</param>
            <returns></returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.KeyToKey#Plugins#IGlobals#Random(System.Int32,System.Int32)">
            <summary>
            指定した範囲のランダムな値を取得します。
            </summary>
            <param name="minValue">最小値</param>
            <param name="maxValue">最大値</param>
            <returns>指定した範囲のランダムな値</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.KeyToKey#Plugins#IGlobals#RandomDouble">
            <summary>
            0.0～1.0のランダムな値を取得します。
            </summary>
            <returns>指定した範囲のランダムな値</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.TryParse``1(System.String,``0@)">
            <summary>
            KeyToKey側の値を解析・取得します。
            </summary>
            <typeparam name="T">型</typeparam>
            <param name="syntax">KeyToKey側の値</param>
            <param name="result">結果</param>
            <returns>解析に成功したか</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.NotifyMessage(System.String,System.Int32)">
            <summary>
            メインウィンドウにメッセージを表示させます。
            </summary>
            <param name="message">表示するメッセージ</param>
            <param name="showingTime">表示している時間</param>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.ChangeFile(System.String)">
            <summary>
            設定ファイルを変更します。
            </summary>
            <param name="fileNameWithoutExtension">ファイル名（.と拡張子なし）</param>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.ChangeProfile(System.String)">
            <summary>
            プロファイルを変更します。
            </summary>
            <param name="settingName">プロファイルの名前</param>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.SetScheduleState(System.String,System.Boolean)">
            <summary>
            割り当て設定（時間）の有効／無効を設定します。true:有効、false:無効
            </summary>
            <param name="identifier">設定の識別キー</param>
            <param name="isEnabled">状態</param>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.GetScheduleState(System.String)">
            <summary>
            割り当て設定（時間）の状態を取得します。true:有効、false:無効
            </summary>
            <param name="identifier">設定の識別キー</param>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.SetEventLockState(KeyToKey.Enums.Keys,System.Boolean)">
            <summary>
            入力ロックの設定を行います。
            </summary>
            <param name="key">キー</param>
            <param name="isLock">true:ロック false:アンロック</param>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.GetEventLockState(KeyToKey.Enums.Keys)">
            <summary>
            入力ロックの状態を取得します。
            </summary>
            <param name="key">キー</param>
            <returns>true:ロック false:アンロック</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Replay(System.String)">
            <summary>
            入力の記録ファイルを再生します。
            </summary>
            <param name="logFile">ログファイルのパス</param>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.CreateDirectory(System.String[])">
            <summary>
            ディレクトを作成します。
            </summary>
            <param name="path">作成するディレクトリのパス</param>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.ToJson(System.Object,System.Boolean)">
            <summary>
            値をJSON形式の文字列に変換します。
            </summary>
            <param name="value">値</param>
            <param name="formatted">JSONを整形するかどうか</param>
            <returns>JSON</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.FromJson``1(System.String)">
            <summary>
            JSON形式から指定した型の値に変換します。
            </summary>
            <typeparam name="T">値の型</typeparam>
            <param name="json">JSON形式の文字列</param>
            <returns>値</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Screenshot(KeyToKey.Plugins.Bounds,KeyToKey.Enums.PixelFormats)">
            <summary>
            指定した位置と範囲のスクリーンショットをBitmapで取得します。
            </summary>
            <param name="bounds">位置と範囲</param>
            <param name="pixelFormat">ピクセルの形式</param>
            <returns>Bitmapのインスタンス</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Screenshot(System.String,KeyToKey.Plugins.Bounds)">
            <summary>
            指定した位置と範囲のスクリーンショットを画像認識のテンプレート画像と同じフォーマットのBitmapで取得します。
            </summary>
            <param name="identifier">画像認識の設定</param>
            <param name="bounds">位置と範囲</param>
            <returns>Bitmapのインスタンス</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.ScreenshotAsync(KeyToKey.Plugins.Bounds,KeyToKey.Enums.PixelFormats)">
            <summary>
            指定した位置と範囲のスクリーンショットをBitmapで取得します。
            </summary>
            <param name="bounds">位置と範囲</param>
            <param name="pixelFormat">ピクセルの形式</param>
            <returns>Bitmapのインスタンス</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Screenshot(System.Int32,System.Int32,System.Int32,System.Int32,KeyToKey.Enums.PixelFormats)">
            <summary>
            指定した位置と範囲のスクリーンショットをBitmapで取得します。
            </summary>
            <param name="left">横の座標</param>
            <param name="top">縦の座標</param>
            <param name="width">横の範囲</param>
            <param name="height">縦の範囲</param>
            <param name="pixelFormat">ピクセルの形式</param>
            <returns>Bitmapのインスタンス</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.ScreenshotAsTemplateMatchingImage(KeyToKey.Plugins.Bounds,KeyToKey.Enums.PixelFormats,System.Boolean)">
            <summary>
            指定した位置と範囲のスクリーンショットをITemplateMatchingImageで取得します。
            </summary>
            <param name="bounds">位置と範囲</param>
            <param name="pixelFormat">ピクセルの形式</param>
            <param name="grayscale">グレースケール</param>
            <returns>ITemplateMatchingImageのインスタンス</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.GetDpiFromPoint(System.Int32,System.Int32)">
            <summary>
            指定した位置にあるモニターのDPIを取得します。
            </summary>
            <param name="x">横の座標</param>
            <param name="y">縦の座標</param>
            <returns>タプル：DpiX, DpiY</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.GetDpiFromPoint(KeyToKey.Plugins.Bounds)">
            <summary>
            指定した位置にあるモニターのDPIを取得します。
            </summary>
            <param name="bounds">横と縦の座標（Width,Heightは使用しません。）</param>
            <returns>タプル：DpiX, DpiY</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.GetDpiFromWindowHandle(System.IntPtr)">
            <summary>
            指定したウィンドウがあるモニターのDPIを取得します。
            </summary>
            <param name="handle"></param>
            <returns>タプル：DpiX, DpiY</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.IsTrigger(KeyToKey.Enums.Keys)">
            <summary>
            指定した値がトリガーの値と一致するかどうかを取得します。
            </summary>
            <param name="key">キー／マウス</param>
            <returns>一致:true 不一致:false</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.IsTrigger(KeyToKey.Enums.ControllerButtons)">
            <summary>
            指定した値がトリガーの値と一致するかどうかを取得します。
            </summary>
            <param name="button">コントローラーのボタン／スティック／トリガー</param>
            <returns>一致:true 不一致:false</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Abort">
            <summary>
            C#スクリプトを強制終了させます。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.CreateWaiter(System.Boolean)">
            <summary>
            待機処理を行うインスタンスを生成します。
            </summary>
            <param name="highPrecision">高精度／高負荷な待機処理を使用するかどうか</param>
            <returns>IWaiterのインスタンス</returns>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.Item(System.String)">
            <summary>
            SharedResources
            </summary>
            <param name="Key">リソースのキー</param>
            <returns></returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.ReadQrCode(System.Drawing.Bitmap)">
            <summary>
            QRコードの画像から文字列を読み取ります。
            </summary>
            <param name="bitmap">QRコードの画像</param>
            <returns>読み取った文字列</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.ReadQrCode(KeyToKey.Plugins.Bounds)">
            <summary>
            指定した範囲をキャプチャしてQRコードを読み取ります。
            </summary>
            <param name="bounds">キャプチャ範囲</param>
            <returns>読み取った文字列</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.CreateQrCodeImage(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            文字列からQRコードの画像を作成します。
            </summary>
            <param name="text">文字列</param>
            <param name="width">横のサイズ</param>
            <param name="height">縦のサイズ</param>
            <param name="margin">余白</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.GetValueBy(System.String)">
            <summary>
            指定したタグの値を取得します。
            プラグイン用
            </summary>
            <param name="tag">引数のタグ</param>
            <returns>引数の値</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.GetValueBy``1(System.String)">
            <summary>
            指定したタグの値を指定した型にキャストしてから取得します。
            プラグイン用
            </summary>
            <typeparam name="T">型</typeparam>
            <param name="tag">引数のタグ</param>
            <returns>引数の値</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Angle(System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.Boolean)">
            <summary>
            指定した(x1, x2)から(x2, y2)の角度を計算します。
            </summary>
            <param name="x1">x1</param>
            <param name="y1">y1</param>
            <param name="x2">x2</param>
            <param name="y2">y2</param>
            <param name="isClockwise">true:右回り false:左回り</param>
            <returns>角度</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Angle(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            指定した(x1, x2)から(x2, y2)の角度を計算します。
            </summary>
            <param name="x1">x1</param>
            <param name="y1">y1</param>
            <param name="x2">x2</param>
            <param name="y2">y2</param>
            /// <param name="isClockwise">true:右回り false:左回り</param>
            <returns>角度</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Angle(System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            指定した(x1, x2)から(x2, y2)の角度を計算します。
            </summary>
            <param name="x1">x1</param>
            <param name="y1">y1</param>
            <param name="x2">x2</param>
            <param name="y2">y2</param>
            /// <param name="isClockwise">true:右回り false:左回り</param>
            <returns>角度</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Angle(System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            指定した(x1, x2)から(x2, y2)の角度を計算します。
            </summary>
            <param name="x1">x1</param>
            <param name="y1">y1</param>
            <param name="x2">x2</param>
            <param name="y2">y2</param>
            /// <param name="isClockwise">true:右回り false:左回り</param>
            <returns>角度</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Angle(System.SByte,System.SByte,System.SByte,System.SByte,System.Boolean)">
            <summary>
            指定した(x1, x2)から(x2, y2)の角度を計算します。
            </summary>
            <param name="x1">x1</param>
            <param name="y1">y1</param>
            <param name="x2">x2</param>
            <param name="y2">y2</param>
            /// <param name="isClockwise">true:右回り false:左回り</param>
            <returns>角度</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Angle(System.Byte,System.Byte,System.Byte,System.Byte,System.Boolean)">
            <summary>
            指定した(x1, x2)から(x2, y2)の角度を計算します。
            </summary>
            <param name="x1">x1</param>
            <param name="y1">y1</param>
            <param name="x2">x2</param>
            <param name="y2">y2</param>
            /// <param name="isClockwise">true:右回り false:左回り</param>
            <returns>角度</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Angle(System.Int64,System.Int64,System.Int64,System.Int64,System.Boolean)">
            <summary>
            指定した(x1, x2)から(x2, y2)の角度を計算します。
            </summary>
            <param name="x1">x1</param>
            <param name="y1">y1</param>
            <param name="x2">x2</param>
            <param name="y2">y2</param>
            /// <param name="isClockwise">true:右回り false:左回り</param>
            <returns>角度</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Angle(System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            指定した(x1, x2)から(x2, y2)の角度を計算します。
            </summary>
            <param name="x1">x1</param>
            <param name="y1">y1</param>
            <param name="x2">x2</param>
            <param name="y2">y2</param>
            /// <param name="isClockwise">true:右回り false:左回り</param>
            <returns>角度</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Angle(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            指定した(x1, x2)から(x2, y2)の角度を計算します。
            </summary>
            <param name="x1">x1</param>
            <param name="y1">y1</param>
            <param name="x2">x2</param>
            <param name="y2">y2</param>
            /// <param name="isClockwise">true:右回り false:左回り</param>
            <returns>角度</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Angle(System.Int16,System.Int16,System.Int16,System.Int16,System.Boolean)">
            <summary>
            指定した(x1, x2)から(x2, y2)の角度を計算します。
            </summary>
            <param name="x1">x1</param>
            <param name="y1">y1</param>
            <param name="x2">x2</param>
            <param name="y2">y2</param>
            /// <param name="isClockwise">true:右回り false:左回り</param>
            <returns>角度</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Distance(System.UInt64,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            指定した(x1, x2)から(x2, y2)の距離を計算します。
            </summary>
            <param name="x1">x1</param>
            <param name="y1">y1</param>
            <param name="x2">x2</param>
            <param name="y2">y2</param>
            <returns>距離</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Distance(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            指定した(x1, x2)から(x2, y2)の距離を計算します。
            </summary>
            <param name="x1">x1</param>
            <param name="y1">y1</param>
            <param name="x2">x2</param>
            <param name="y2">y2</param>
            <returns>距離</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Distance(System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            指定した(x1, x2)から(x2, y2)の距離を計算します。
            </summary>
            <param name="x1">x1</param>
            <param name="y1">y1</param>
            <param name="x2">x2</param>
            <param name="y2">y2</param>
            <returns>距離</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Distance(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            指定した(x1, x2)から(x2, y2)の距離を計算します。
            </summary>
            <param name="x1">x1</param>
            <param name="y1">y1</param>
            <param name="x2">x2</param>
            <param name="y2">y2</param>
            <returns>距離</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Distance(System.SByte,System.SByte,System.SByte,System.SByte)">
            <summary>
            指定した(x1, x2)から(x2, y2)の距離を計算します。
            </summary>
            <param name="x1">x1</param>
            <param name="y1">y1</param>
            <param name="x2">x2</param>
            <param name="y2">y2</param>
            <returns>距離</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Distance(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            指定した(x1, x2)から(x2, y2)の距離を計算します。
            </summary>
            <param name="x1">x1</param>
            <param name="y1">y1</param>
            <param name="x2">x2</param>
            <param name="y2">y2</param>
            <returns>距離</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Distance(System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            指定した(x1, x2)から(x2, y2)の距離を計算します。
            </summary>
            <param name="x1">x1</param>
            <param name="y1">y1</param>
            <param name="x2">x2</param>
            <param name="y2">y2</param>
            <returns>距離</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Distance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            指定した(x1, x2)から(x2, y2)の距離を計算します。
            </summary>
            <param name="x1">x1</param>
            <param name="y1">y1</param>
            <param name="x2">x2</param>
            <param name="y2">y2</param>
            <returns>距離</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Distance(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            指定した(x1, x2)から(x2, y2)の距離を計算します。
            </summary>
            <param name="x1">x1</param>
            <param name="y1">y1</param>
            <param name="x2">x2</param>
            <param name="y2">y2</param>
            <returns>距離</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Distance(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            指定した(x1, x2)から(x2, y2)の距離を計算します。
            </summary>
            <param name="x1">x1</param>
            <param name="y1">y1</param>
            <param name="x2">x2</param>
            <param name="y2">y2</param>
            <returns>距離</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Clamp(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            min 以上 max 以下の範囲内で value を返します。
            </summary>
            <param name="min">最小値</param>
            <param name="max">最大値</param>
            <param name="value">値</param>
            <returns>範囲内の値</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Clamp(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            min 以上 max 以下の範囲内で value を返します。
            </summary>
            <param name="min">最小値</param>
            <param name="max">最大値</param>
            <param name="value">値</param>
            <returns>範囲内の値</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Clamp(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            min 以上 max 以下の範囲内で value を返します。
            </summary>
            <param name="min">最小値</param>
            <param name="max">最大値</param>
            <param name="value">値</param>
            <returns>範囲内の値</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            min 以上 max 以下の範囲内で value を返します。
            </summary>
            <param name="min">最小値</param>
            <param name="max">最大値</param>
            <param name="value">値</param>
            <returns>範囲内の値</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Clamp(System.SByte,System.SByte,System.SByte)">
            <summary>
            min 以上 max 以下の範囲内で value を返します。
            </summary>
            <param name="min">最小値</param>
            <param name="max">最大値</param>
            <param name="value">値</param>
            <returns>範囲内の値</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Clamp(System.Byte,System.Byte,System.Byte)">
            <summary>
            min 以上 max 以下の範囲内で value を返します。
            </summary>
            <param name="min">最小値</param>
            <param name="max">最大値</param>
            <param name="value">値</param>
            <returns>範囲内の値</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Clamp(System.Int64,System.Int64,System.Int64)">
            <summary>
            min 以上 max 以下の範囲内で value を返します。
            </summary>
            <param name="min">最小値</param>
            <param name="max">最大値</param>
            <param name="value">値</param>
            <returns>範囲内の値</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            min 以上 max 以下の範囲内で value を返します。
            </summary>
            <param name="min">最小値</param>
            <param name="max">最大値</param>
            <param name="value">値</param>
            <returns>範囲内の値</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            min 以上 max 以下の範囲内で value を返します。
            </summary>
            <param name="min">最小値</param>
            <param name="max">最大値</param>
            <param name="value">値</param>
            <returns>範囲内の値</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Clamp(System.Int16,System.Int16,System.Int16)">
            <summary>
            min 以上 max 以下の範囲内で value を返します。
            </summary>
            <param name="min">最小値</param>
            <param name="max">最大値</param>
            <param name="value">値</param>
            <returns>範囲内の値</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.FindPointOnCircle(System.Double,System.Double,System.Boolean)">
            <summary>
            半径と角度から円上の位置を計算します。
            </summary>
            <param name="radius">半径</param>
            <param name="angle">角度</param>
            <param name="isClockwise">右回りかどうか</param>
            <returns>円上の位置</returns>
        </member>
        <member name="P:KeyToKey.Plugins.GlobalsBridge.CallCount">
            <summary>
            <seealso cref="M:KeyToKey.Plugins.GlobalsBridge.CallNext(System.Action[])"/>メソッドが呼ばれた回数
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.CallNext(System.Action[])">
            <summary>
            <para>メソッドが呼び出された回数を数え回数に対応するデリゲートを実行します。</para>
            例えば3つのデリゲートをメソッドに渡した場合、はじめにメソッドを呼び出した時には1つめのデリゲートが実行されます。2回目は2つ目のデリゲート、3回目は3つ目のデリゲートが実行され、次に呼び出し時は最初に戻ります。
            </summary>
            <param name="callbacks">実行するデリゲート</param>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.ThrowIfShouldNotContinue">
            <summary>
            ShouldContinueプロパティがFalseであれば例外を投げます。
            </summary>
            <exception cref="T:System.OperationCanceledException"></exception>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Down(KeyToKey.Enums.Keys,System.Int32,System.Boolean)">
            <summary>
            キー／マウスのボタン／マウスのボタンを押します。
            </summary>
            <param name="key">キー／マウスのボタン</param>
            <param name="interval">押した後の待機時間</param>
            <param name="eventCancel">キー／マウスのボタンの入力イベントをキャンセルするか</param>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Up(KeyToKey.Enums.Keys,System.Int32,System.Boolean)">
            <summary>
            キー／マウスのボタンを離します。
            </summary>
            <param name="key">キー／マウスのボタン</param>
            <param name="interval">離した後の待機時間</param>
            <param name="eventCancel">キー／マウスのボタンの入力イベントをキャンセルするか</param>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Tap(KeyToKey.Enums.Keys,System.Int32,System.Int32,System.Boolean)">
            <summary>
            キー／マウスのボタンを押して離します。
            </summary>
            <param name="key">キー／マウスのボタン</param>
            <param name="interval1">押した後の待機時間</param>
            <param name="interval2">離した後の待機時間</param>
            <param name="eventCancel">キー／マウスのボタンの入力イベントをキャンセルするか</param>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.InputText(System.String,System.Int32)">
            <summary>
            文字列を入力します。
            </summary>
            <param name="text">入力する文字</param>
            <param name="interval">1文字入力するごとに待機する時間</param>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Move(System.Int32,System.Int32,System.Int32)">
            <summary>マウスカーソルを指定した位置へ移動させます。</summary>
            <param name="x">横の座標</param>
            <param name="y">縦の座標</param>
            <param name="interval">移動後の待機時間</param>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Move(System.ValueTuple{System.Int32,System.Int32},System.Int32)">
            <summary>
            マウスカーソルを指定した位置へ移動させます。
            </summary>
            <param name="position">移動先の座標（タプル）</param>
            <param name="interval">移動後の待機時間</param>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.MoveWithSteps(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>マウスカーソルを指定した位置へ移動させます。</summary>
            <param name="destX">横の座標</param>
            <param name="destY">縦の座標</param>
            <param name="maxSteps">ステップ数</param>
            <param name="wait">ステップ毎に待機する時間</param>
            <param name="smooth">スムーズ移動</param>
            <param name="useApi">APIの使用</param>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.MoveWithSteps(System.ValueTuple{System.Int32,System.Int32},System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>マウスカーソルを指定した位置へ移動させます。</summary>
            <param name="position">移動先の座標（タプル）</param>
            <param name="maxSteps">ステップ数</param>
            <param name="wait">ステップ毎に待機する時間</param>
            <param name="smooth">スムーズ移動</param>
            <param name="useApi">APIの使用</param>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Offset(System.Int32,System.Int32,System.Int32)">
            <summary>マウスカーソルを指定した分だけ移動させます。</summary>
            <param name="x">横の座標</param>
            <param name="y">縦の座標</param>
            <param name="interval">移動後の待機時間</param>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Offset(System.ValueTuple{System.Int32,System.Int32},System.Int32)">
            <summary>
            マウスカーソルを指定した分だけ移動させます。
            </summary>
            <param name="amount">移動量（タプル）</param>
            <param name="interval">移動後の待機時間</param>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.OffsetWithSteps(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>マウスカーソルを指定した分だけ移動させます。</summary>
            <param name="destX">横の座標</param>
            <param name="destY">縦の座標</param>
            <param name="maxSteps">ステップ数</param>
            <param name="wait">ステップ毎に待機する時間</param>
            <param name="smooth">スムーズ移動</param>
            <param name="useApi">APIの使用</param>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.OffsetWithSteps(System.ValueTuple{System.Int32,System.Int32},System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>マウスカーソルを指定した分だけ移動させます。</summary>
            <param name="amount">移動量（タプル）</param>
            <param name="maxSteps">ステップ数</param>
            <param name="wait">ステップ毎に待機する時間</param>
            <param name="smooth">スムーズ移動</param>
            <param name="useApi">APIの使用</param>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.WheelUp(System.Int32)">
            <summary>ホイール上</summary>
            <param name="delta">移動量</param>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.WheelDown(System.Int32)">
            <summary>ホイール下</summary>
            <param name="delta">移動量</param>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.WheelLeft(System.Int32)">
            <summary>ホイール左</summary>
            <param name="delta">移動量</param>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.WheelRight(System.Int32)">
            <summary>ホイール右</summary>
            <param name="delta">移動量</param>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.GetCursorPosition">
            <summary>
            マウスカーソルの位置を取得します。
            </summary>
            <returns>マウスカーソルの位置（タプル）</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.IsPressed(KeyToKey.Enums.Keys)">
            <summary>
            キー／マウスのボタンが押されているかどうかを取得します。
            </summary>
            <param name="key">キー／マウスのボタン</param>
            <returns>押されていたらTrue、離されていたらFalseを返します。</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.IsPressed(KeyToKey.Enums.ControllerButtons)">
            <summary>
            コントローラーのボタンが押されているかどうかを取得します。
            </summary>
            <param name="button">コントローラーのボタン</param>
            <returns>押されていたらTrue、離されていたらFalseを返します。</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.GetAsyncKeyState(KeyToKey.Enums.Keys)">
            <summary>
            キー／マウスのボタンが押されているかどうかを取得します。
            </summary>
            <param name="key">キー／マウスのボタン</param>
            <returns>押されていたらTrue、離されていたらFalseを返します。</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.SetTextToClipboard(System.String)">
            <summary>
            クリップボードにテキストをセットします。
            ※セットに失敗することがあります。
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.GetTextFromClipboard">
            <summary>
            クリップボードからテキストを取得します。
            </summary>
            <returns></returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.LoadTemplateMatchingImage(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Match(System.String,KeyToKey.Plugins.MatchResult@)">
            <summary>
            テンプレート画像に類似する一つの画像を探します。
            </summary>
            <param name="identifier">識別キー</param>
            <param name="result">結果</param>
            <returns>類似画像が見つかったかどうかを返します。</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Match(System.String,System.Drawing.Bitmap,KeyToKey.Plugins.MatchResult@)">
            <summary>
            テンプレート画像に類似する一つの画像を探します。
            </summary>
            <param name="identifier">識別キー</param>
            <param name="sourceImage">探索元の画像</param>
            <param name="result">探索結果</param>
            <returns>類似画像が見つかったかどうかを返します。</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Match(System.String,KeyToKey.Plugins.ITemplateMatchingImage,KeyToKey.Plugins.MatchResult@)">
            <summary>
            テンプレート画像に類似する一つの画像を探します。
            </summary>
            <param name="identifier">識別キー</param>
            <param name="sourceImage">探索元の画像</param>
            <param name="result">探索結果</param>
            <returns>類似画像が見つかったかどうかを返します。</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Match(System.String,KeyToKey.Plugins.Bounds,KeyToKey.Plugins.MatchResult@)">
            <summary>
            テンプレート画像に類似する一つの画像を探します。
            </summary>
            <param name="identifier">識別キー</param>
            <param name="bounds">探索範囲</param>
            <param name="result">探索結果</param>
            <returns>類似画像が見つかったかどうかを返します。</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Match(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,KeyToKey.Plugins.MatchResult@)">
            <summary>
            テンプレート画像に類似する一つの画像を探します。
            </summary>
            <param name="templateImageFilePath">テンプレート画像のファイルパス(.png, .jpg, .bmp)</param>
            <param name="x">探索する横の座標</param>
            <param name="y">探索する縦の座標</param>
            <param name="width">探索する横の範囲</param>
            <param name="height">探索する縦の範囲</param>
            <param name="threshold">類似度（0.0～1.0）。どれくらいの数値になれば類似画像としてみなすかどうかを決める値です。1.0に近いほど類似性が高いことを示します。</param>
            <param name="result">探索結果</param>
            <returns>類似画像が見つかったかどうかを返します。</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Match(System.String,System.Double,KeyToKey.Plugins.Bounds,KeyToKey.Plugins.MatchResult@)">
            <summary>
            テンプレート画像に類似する一つの画像を探します。
            </summary>
            <param name="templateImageFilePath">テンプレート画像のファイルパス(.png, .jpg, .bmp)</param>
            <param name="threshold">類似度（0.0～1.0）どれくらいの数値になれば類似画像としてみなすかどうかを決める値です。1.0に近いほど類似性が高いことを示します。</param>
            <param name="bounds">位置と範囲</param>
            <param name="result">探索結果</param>
            <returns>類似画像が見つかったかどうかを返します。</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Match(System.Drawing.Bitmap,System.Double,KeyToKey.Plugins.Bounds,KeyToKey.Plugins.MatchResult@)">
            <summary>
            テンプレート画像に類似する一つの画像を探します。
            </summary>
            <param name="templateImage">テンプレート画像</param>
            <param name="threshold">類似度（0.0～1.0）どれくらいの数値になれば類似画像としてみなすかどうかを決める値です。1.0に近いほど類似性が高いことを示します。</param>
            <param name="bounds">探索する位置と範囲</param>
            <param name="result">探索結果</param>
            <returns>類似画像が見つかったかどうかを返します。</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Match(System.Drawing.Bitmap,System.Drawing.Bitmap,System.Double,KeyToKey.Plugins.MatchResult@)">
            <summary>
            テンプレート画像に類似する一つの画像を探します。Z
            </summary>
            <param name="templateImage">テンプレート画像</param>
            <param name="sourceImage">探索元の画像</param>
            <param name="threshold">類似度（0.0～1.0）どれくらいの数値になれば類似画像としてみなすかどうかを決める値です。1.0に近いほど類似性が高いことを示します。</param>
            <param name="result">探索結果</param>
            <returns>類似画像が見つかったかどうかを返します。</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Match(KeyToKey.Plugins.ITemplateMatchingImage,KeyToKey.Plugins.ITemplateMatchingImage,System.Double,KeyToKey.Plugins.MatchResult@)">
            <summary>
            テンプレート画像に類似する一つの画像を探します。
            </summary>
            <param name="templateImage">テンプレート画像</param>
            <param name="sourceImage">探索元の画像</param>
            <param name="threshold">類似度（0.0～1.0）どれくらいの数値になれば類似画像としてみなすかどうかを決める値です。1.0に近いほど類似性が高いことを示します。</param>
            <param name="result">探索結果</param>
            <returns>類似画像が見つかったかどうかを返します。</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Matches(System.String,System.Collections.Generic.IEnumerable{KeyToKey.Plugins.MatchResult}@)">
            <summary>
            テンプレート画像に類似する複数の画像を探します。
            </summary>
            <param name="identifier">識別キー</param>
            <param name="results">結果</param>
            <returns>類似画像が見つかったかどうかを返します。</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Matches(System.String,KeyToKey.Plugins.Bounds,System.Collections.Generic.IEnumerable{KeyToKey.Plugins.MatchResult}@)">
            <summary>
            テンプレート画像に類似する複数の画像を探します。
            </summary>s
            <param name="identifier">識別キー</param>
            <param name="bounds">探索範囲</param>
            <param name="Results">結果</param>
            <returns>類似画像が見つかったかどうかを返します。</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Matches(System.String,KeyToKey.Plugins.ITemplateMatchingImage,System.Collections.Generic.IEnumerable{KeyToKey.Plugins.MatchResult}@)">
            <summary>
            テンプレート画像に類似する複数の画像を探します。
            </summary>
            <param name="identifier">識別キー</param>
            <param name="sourceImage">探索元の画像</param>
            <param name="results">結果</param>
            <returns>類似画像が見つかったかどうかを返します。</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Matches(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Collections.Generic.IEnumerable{KeyToKey.Plugins.MatchResult}@)">
            <summary>
            テンプレート画像に類似する複数の画像を探します。
            </summary>
            <param name="filePath">テンプレート画像のファイルパス(.png, .jpg, .bmp)</param>
            <param name="x">探索する横の座標</param>
            <param name="y">探索する縦の座標</param>
            <param name="width">探索する横の範囲</param>
            <param name="height">探索する縦の範囲</param>
            <param name="threshold">類似度（0.0～1.0）。どれくらいの数値になれば類似画像としてみなすかどうかを決める値です。1.0に近いほど類似性が高いことを示します。</param>
            <param name="results">探索結果</param>
            <returns>類似画像が見つかったかどうかを返します。</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Matches(System.String,KeyToKey.Plugins.Bounds,System.Double,System.Collections.Generic.IEnumerable{KeyToKey.Plugins.MatchResult}@)">
            <summary>
            テンプレート画像に類似する複数の画像を探します。
            </summary>
            <param name="filePath">テンプレート画像のファイルパス(.png, .jpg, .bmp)</param>
            <param name="bounds">探索範囲</param>
            <param name="threshold">類似度（0.0～1.0）。どれくらいの数値になれば類似画像としてみなすかどうかを決める値です。1.0に近いほど類似性が高いことを示します。</param>
            <param name="results">探索結果</param>
            <returns>類似画像が見つかったかどうかを返します。</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.MakeWindowController(System.IntPtr)">
            <summary>
            ウィンドウの操作や情報取得機能を提供するインスタンスを作成します。
            </summary>
            <param name="windowHandle">ウィンドウハンドル</param>
            <returns><seealso cref="T:KeyToKey.Plugins.IWindowController"/>のインスタンス</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.FindWindow(System.String)">
            <summary>
            特定のウィンドウから指定した条件のウィンドウを探します。
            </summary>
            <param name="windowTitle">ウィンドウのタイトル</param>
            <returns><seealso cref="T:KeyToKey.Plugins.IWindowController"/>のインスタンス</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.FindWindow(System.String,System.String)">
            <summary>
            特定のウィンドウから指定した条件のウィンドウを探します。
            </summary>
            <param name="windowTitle">ウィンドウのタイトル</param>
            <param name="className">クラス名</param>
            <returns><seealso cref="T:KeyToKey.Plugins.IWindowController"/>のインスタンス</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.FindWindow(System.IntPtr,System.String,System.String)">
            <summary>
            特定のウィンドウから指定した条件のウィンドウを探します。
            </summary>
            <param name="windowHandle">ウィンドウハンドル</param>
            <param name="windowTitle">ウィンドウのタイトル</param>
            <param name="className">クラス名</param>
            <returns><seealso cref="T:KeyToKey.Plugins.IWindowController"/>のインスタンス</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.FindWindow(KeyToKey.Plugins.IWindowController,System.String,System.String)">
            <summary>
            特定のウィンドウから指定した条件のウィンドウを探します。
            </summary>
            <param name="windowController"><seealso cref="T:KeyToKey.Plugins.IWindowController"/>のインスタンス</param>
            <param name="windowTitle">ウィンドウのタイトル</param>
            <param name="className">クラス名</param>
            <returns><seealso cref="T:KeyToKey.Plugins.IWindowController"/>のインスタンス</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.FindWindowTitleStartsWith(System.String)">
            <summary>
            すべてのウィンドウから指定したタイトルの一部から始まるウィンドウを探します。見つからなかった場合はnullを返します。
            </summary>
            <param name="text">タイトルの一部</param>
            <returns><seealso cref="T:KeyToKey.Plugins.IWindowController"/>のインスタンス</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.FindWindowTitleEndsWith(System.String)">
            <summary>
            すべてのウィンドウから指定したタイトルの一部で終わるウィンドウを探します。見つからなかった場合はnullを返します。
            </summary>
            <param name="text">タイトルの一部</param>
            <returns><seealso cref="T:KeyToKey.Plugins.IWindowController"/>のインスタンス</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.FindWindowTitleContains(System.String)">
            <summary>
            すべてのウィンドウから指定したタイトルの一部が含まれるウィンドウを探します。見つからなかった場合はnullを返します。
            </summary>
            <param name="text">タイトルの一部</param>
            <returns><seealso cref="T:KeyToKey.Plugins.IWindowController"/>のインスタンス</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.WindowFromPoint(System.Int32,System.Int32)">
            <summary>
            指定した座標にあるウィンドウのハンドルを取得します。
            </summary>
            <param name="x">横の座標</param>
            <param name="y">縦の座標</param>
            <returns>ウィンドウハンドル</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.WindowFromPoint(System.ValueTuple{System.Int32,System.Int32})">
            <summary>
            指定した座標にあるウィンドウのハンドルを取得します。
            </summary>
            <param name="point">横と縦の座標（タプル形式）</param>
            <returns>ウィンドウハンドル</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Activate(System.String,System.Boolean)">
            <summary>
            指定されたプロセス名のウィンドウをアクティブにします。
            </summary>
            <param name="processName">プロセス名</param>
            <param name="allWindow">true:見つかったすべてのウィンドウをアクティブにしていく</param>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.ShowTextBoxDialog``1(System.String,System.String,System.Boolean,System.Boolean,``0@)">
            <summary>
            テキストボックスを表示します。
            </summary>
            <typeparam name="T">テキストを解析・変換後の型</typeparam>
            <param name="title">ウィンドウのタイトル</param>
            <param name="initialText">初期テキスト</param>
            <param name="applyRules">KeyToKeyの値ルールを適用するかどうか</param>
            <param name="restoreWindow">ウィンドウが閉じられた後に開始前のウィンドウを表示する</param>
            <param name="result">入力されたテキスト、値ルールを適用している場合はTの型へ変換されます。</param>
            <returns>正常：True、 異常：False</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.GetBoundsByWindow(KeyToKey.Plugins.Bounds)">
            <summary>
            選択ウィドウを使って位置とサイズを取得します。選択せずにウィンドウを閉じた場合はnullを返します。
            </summary>
            <param name="defaultBounds">開始位置</param>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.GetBoundsByWindow(KeyToKey.Enums.WindowPopLocation)">
            <summary>
            選択ウィドウを使って位置とサイズを取得します。選択せずにウィンドウを閉じた場合はnullを返します。
            </summary>
            <param name="pop">ウィンドウの初期位置を指定します。</param>
            <returns>選択した範囲。キャンセルした場合はnullを返します。</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.ShowImageAsync(System.Drawing.Bitmap,System.String)">
            <summary>
            画像を表示できるウィンドウを表示します。
            </summary>
            <param name="bitmap">表示する画像</param>
            <param name="title">ウィンドウタイトル</param>
            <returns>IWindowController</returns>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.PlaySound(System.String,System.Int32,System.Boolean)">
            <summary>
            音声ファイルを再生します。
            </summary>
            <param name="filePath">音声ファイルのパス</param>
            <param name="volume">ボリューム（0～100）</param>
            <param name="waitPlayEnd">音声ファイルの再生が終了するのを待つ</param>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.PlaySystemSound(KeyToKey.Enums.SystemSounds)">
            <summary>
            システム音声を再生します。
            </summary>
            <param name="sound">システム音声の種類</param>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.Speech(System.String,System.Int32,System.Int32,KeyToKey.Enums.SpeechLanguage)">
            <summary>
            メッセージを読み上げます。
            </summary>
            <param name="message">読み上げるメッセージ</param>
            <param name="volume">音量（0～100）</param>
            <param name="speed">スピード（-10～10）</param>
            <param name="lang">言語</param>
        </member>
        <member name="M:KeyToKey.Plugins.GlobalsBridge.SpeechAsync(System.String,System.Int32,System.Int32,KeyToKey.Enums.SpeechLanguage)">
            <summary>
            非同期でメッセージを読み上げます。
            </summary>
            <param name="message">読み上げるメッセージ</param>
            <param name="volume">音量（0～100）</param>
            <param name="speed">スピード（-10～10）</param>
            <param name="lang">言語</param>
        </member>
        <member name="M:KeyToKey.Plugins.Helpers.BitmapHelper.ToTemplateMatchingImage(System.Drawing.Bitmap,System.Boolean)">
            <summary>
            Bimapを画像認識用の画像に変換します。主にMatch(),Matches()で使用されます。
            </summary>
            <param name="bitmap">bitmap</param>
            <param name="grayscale">グレースケール</param>
            <returns>ITemplateMatchingImage</returns>
        </member>
        <member name="M:KeyToKey.Plugins.Helpers.BitmapHelper.ToPixelFormats(System.Drawing.Imaging.PixelFormat)">
            <summary>
            System.Drawing.Imaging.PixelFormatをKeyToKey.Enum.PixelFormatsに変換します。
            </summary>
            <param name="pixelFormat">System.Drawing.Imaging.PixelFormat</param>
            <returns>KeyToKey.Enum.PixelFormats</returns>
        </member>
        <member name="M:KeyToKey.Plugins.Helpers.BitmapHelper.ToPixelFormat(KeyToKey.Enums.PixelFormats)">
            <summary>
            KeyToKey.Enum.PixelFormatsをSystem.Drawing.Imaging.PixelFormatに変換します。
            </summary>
            <param name="pixelFormat">System.Drawing.Imaging.PixelFormat</param>
            <returns>System.Drawing.Imaging.PixelFormat</returns>
        </member>
        <member name="M:KeyToKey.Plugins.Helpers.IntPtrHelper.ToWindowController(System.IntPtr)">
            <summary>
            IntPtrからIWindowControllerを作成します。
            </summary>
            <returns></returns>
        </member>
        <member name="M:KeyToKey.Plugins.Helpers.ObjectHelper.ToJson(System.Object,System.Boolean)">
            <summary>
            オブジェクトをJsonに変換します。
            </summary>
            <param name="obj">変換するオブジェクト</param>
            <param name="formatted">整形されたデータにするかどうか</param>
            <returns></returns>
        </member>
        <member name="M:KeyToKey.Plugins.Helpers.ObjectHelper.ToFormattedJson(System.Object)">
            <summary>
            オブジェクトを整形されたJsonに変換します。
            </summary>
            <param name="obj">変換するオブジェクト</param>
            <returns></returns>
        </member>
        <member name="M:KeyToKey.Plugins.Helpers.StringHelper.FromJsonTo``1(System.String)">
            <summary>
            Json文字列から指定した型パラメーターのオブジェクトに変換します。
            </summary>
            <typeparam name="T">型</typeparam>
            <param name="json">Json形式の文字列</param>
            <returns></returns>
        </member>
        <member name="M:KeyToKey.Plugins.Helpers.StringHelper.RemoveSpaces(System.String)">
            <summary>
            空白文字を削除します。
            </summary>
            <param name="str">文字列</param>
            <returns>空白文字が削除された文字列</returns>
        </member>
        <member name="M:KeyToKey.Plugins.Helpers.StringHelper.IgnoreCaseEquals(System.String,System.String)">
            <summary>
            大文字小文字を無視して2つの文字が同じかどうかを比較します。
            </summary>
            <param name="s">文字列</param>
            <param name="str">文字列</param>
        </member>
        <member name="M:KeyToKey.Plugins.Helpers.StringHelper.IsNullOrEmpty(System.String)">
            <summary>
            文字列がnullもしくは空だった場合にtrueを返します。
            </summary>
            <param name="str">文字列</param>
        </member>
        <member name="M:KeyToKey.Plugins.Helpers.StringHelper.IsNullOrWhiteSpace(System.String)">
            <summary>
            文字列がnullもしくは空、空白文字しか無い場合にtrueを返します。
            </summary>
            <param name="s">文字列</param>
        </member>
        <member name="M:KeyToKey.Plugins.Helpers.StringHelper.IgnoreCaseStartsWith(System.String,System.String)">
            <summary>
            大文字小文字を無視して指定した文字で始まるかどうかを取得します。
            </summary>
            <param name="str"></param>
            <param name="startString"></param>
            <returns></returns>
        </member>
        <member name="M:KeyToKey.Plugins.Helpers.StringHelper.IgnoreCaseEndsWith(System.String,System.String)">
            <summary>
            大文字小文字を無視して指定した文字で終わるかどうかを取得します。
            </summary>
            <param name="str"></param>
            <param name="endString"></param>
            <returns></returns>
        </member>
        <member name="M:KeyToKey.Plugins.Helpers.StringHelper.IgnoreCaseContains(System.String,System.String)">
            <summary>
            大文字小文字を無視して指定した文字を含むかどうかを取得します。
            </summary>
            <param name="s"></param>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:KeyToKey.Plugins.LowLevelKeyboardHookStruct">
            <summary>
            低レベルキーボードフックの構造体
            </summary>
        </member>
        <member name="F:KeyToKey.Plugins.LowLevelKeyboardHookStruct.VirtualKeyCode">
            <summary>
            仮想キーコード
            </summary>
        </member>
        <member name="F:KeyToKey.Plugins.LowLevelKeyboardHookStruct.ScanCode">
            <summary>
            スキャンコード
            </summary>
        </member>
        <member name="F:KeyToKey.Plugins.LowLevelKeyboardHookStruct.Flags">
            <summary>
            フラグ
            </summary>
        </member>
        <member name="F:KeyToKey.Plugins.LowLevelKeyboardHookStruct.Time">
            <summary>
            時間
            </summary>
        </member>
        <member name="F:KeyToKey.Plugins.LowLevelKeyboardHookStruct.ExtraInfo">
            <summary>
            ExtraInfo
            </summary>
        </member>
        <member name="T:KeyToKey.Plugins.LowLevelMouseHookStruct">
            <summary>
            低レベルマウスフックの構造体
            </summary>
        </member>
        <member name="F:KeyToKey.Plugins.LowLevelMouseHookStruct.Point">
            <summary>
            位置
            </summary>
        </member>
        <member name="F:KeyToKey.Plugins.LowLevelMouseHookStruct.MouseData">
            <summary>
            マウスデータ
            </summary>
        </member>
        <member name="F:KeyToKey.Plugins.LowLevelMouseHookStruct.Flags">
            <summary>
            フラグ
            </summary>
        </member>
        <member name="F:KeyToKey.Plugins.LowLevelMouseHookStruct.Time">
            <summary>
            時間
            </summary>
        </member>
        <member name="F:KeyToKey.Plugins.LowLevelMouseHookStruct.ExtraInfo">
            <summary>
            ExtraInfo
            </summary>
        </member>
        <member name="T:KeyToKey.Plugins.HookType">
            <summary>
            フックタイプ
            </summary>
        </member>
        <member name="F:KeyToKey.Plugins.HookType.Keyboard">
            <summary>
            キーボード
            </summary>
        </member>
        <member name="F:KeyToKey.Plugins.HookType.Mouse">
            <summary>
            マウス
            </summary>
        </member>
        <member name="T:KeyToKey.Plugins.EventType">
            <summary>
            入力イベントの種類
            </summary>
        </member>
        <member name="F:KeyToKey.Plugins.EventType.Stroke">
            <summary>
            キーボード／マウスが押されたり離された
            </summary>
        </member>
        <member name="F:KeyToKey.Plugins.EventType.Move">
            <summary>
            マウスが移動された
            </summary>
        </member>
        <member name="F:KeyToKey.Plugins.EventType.Wheel">
            <summary>
            マウスホイールをスクロールした
            </summary>
        </member>
        <member name="T:KeyToKey.Plugins.HookEventArgs">
            <summary>
            フックのイベントデータ
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.HookEventArgs.HookType">
            <summary>
            フックタイプ
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.HookEventArgs.EventType">
            <summary>
            入力イベントの種類
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.HookEventArgs.Keyboard">
            <summary>
            キーボードフックの構造体
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.HookEventArgs.Mouse">
            <summary>
            マウスフックの構造体
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.HookEventArgs.IsInjected">
            <summary>
            アプリケーションによる入力かどうか
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.HookEventArgs.Key">
            <summary>
            キー／マウス
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.HookEventArgs.IsPressed">
            <summary>
            押されたかどうか
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.HookEventArgs.IsToggleKey">
            <summary>
            トグルキーかどうか
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.HookEventArgs.IsRepeated">
            <summary>
            繰り返された入力かどうか
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.HookEventArgs.IsCancel">
            <summary>
            キャンセルするかどうか
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.HookEventArgs.#ctor(KeyToKey.Plugins.HookType,KeyToKey.Plugins.EventType,KeyToKey.Enums.Keys,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="hookType">フックタイプ</param>
            <param name="eventType">入力イベントの種類</param>
            <param name="key">キー／マウス</param>
            <param name="isPressed">押されたかどうか</param>
            <param name="isInjected">HookEventArgs</param>
            <param name="isToggleKey">トグルキーかどうか</param>
            <param name="isRepeated">繰り返された入力かどうか</param>
        </member>
        <member name="M:KeyToKey.Plugins.HookEventArgs.#ctor(KeyToKey.Plugins.IGlobals,KeyToKey.Plugins.HookEventArgs)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="e"></param>
        </member>
        <member name="M:KeyToKey.Plugins.HookEventArgs.Convert(KeyToKey.Enums.Keys,KeyToKey.Enums.Keys,KeyToKey.Enums.Keys[])">
            <summary>
            キーの入力を変換します。入力イベントがアプリによるものであった場合は変換しません。
            </summary>
            <param name="from">対象とするキー</param>
            <param name="to">変換後のキー</param>
            <param name="modifiers">同時押しのキー</param>
        </member>
        <member name="M:KeyToKey.Plugins.HookEventArgs.Convert(KeyToKey.Enums.Keys,KeyToKey.Enums.Keys,System.Func{System.Boolean})">
            <summary>
            条件を指定してキーの入力を変換します。入力イベントがアプリによるものであった場合は変換しません。
            </summary>
            <param name="from">対象とするキー</param>
            <param name="to">変換後のキー</param>
            <param name="condition"></param>
        </member>
        <member name="T:KeyToKey.Plugins.IArgumentsProvider">
            <summary>
            引数の値を取得するメソッドを提供します。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IArgumentsProvider.GetValueBy(System.String)">
            <summary>
            指定したタグの値を取得します。
            </summary>
            <param name="tag">引数のタグ</param>
            <returns>引数の値</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IArgumentsProvider.GetValueBy``1(System.String)">
            <summary>
            指定したタグの値を指定した型にキャストしてから取得します。
            </summary>
            <typeparam name="T">型</typeparam>
            <param name="tag">引数のタグ</param>
            <returns>引数の値</returns>
        </member>
        <member name="T:KeyToKey.Plugins.IClipboard">
            <summary>
            Clipboard
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IClipboard.SetText(System.String)">
            <summary>
            クリップボードにテキストをセットします。
            ※セットに失敗することがあります。
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:KeyToKey.Plugins.IClipboard.GetText">
            <summary>
            クリップボードからテキストを取得します。
            </summary>
            <returns></returns>
        </member>
        <member name="P:KeyToKey.Plugins.IClipboard.Text">
            <summary>
            クリップボードのテキストを取得、設定します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IClipboard.Image">
            <summary>
            クリップボードの画像をBitmapで取得します。
            </summary>
        </member>
        <member name="T:KeyToKey.Plugins.IController">
            <summary>
            コントローラー
            </summary>
        </member>
        <member name="E:KeyToKey.Plugins.IController.ControllerStateChanged">
            <summary>
            コントローラーのボタンが入力されたら発生します。
            </summary>
        </member>
        <member name="E:KeyToKey.Plugins.IController.Connected">
            <summary>
            コントローラーが接続されたら発生します。
            </summary>
        </member>
        <member name="E:KeyToKey.Plugins.IController.Disconnected">
            <summary>
            コントローラーの接続が解除されたら発生します。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IController.GetThumbs">
            <summary>
            スティックの入力状態を取得します。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IController.GetThumbsAsShort">
            <summary>
            スティックの入力値をshort型で取得します。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IController.GetDeadZones">
            <summary>
            スティックのデッドゾーンを取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IController.DeviceType">
            <summary>
            現在監視しているデバイスのタイプを取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IController.LeftTrigger">
            <summary>
            左トリガーの状態
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IController.RightTrigger">
            <summary>
            右トリガーの状態
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IController.LeftStick">
            <summary>
            左スティック
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IController.RightStick">
            <summary>
            右スティック
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IController.IsConnected">
            <summary>
            コントローラーが接続されているかどうかを取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IController.DpadDirection">
            <summary>
            十字キーの入力方向
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IController.NormalizedLeftStick">
            <summary>
            正規化された左スティックの値を取得します。このプロパティは使用しているデバイスタイプに影響されません。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IController.NormalizedRightStick">
            <summary>
            正規化された右スティックの値を取得します。このプロパティは使用しているデバイスタイプに影響されません。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IController.NormalizedLeftTrigger">
            <summary>
            正規化された左トリガーの値を取得します。このプロパティは使用しているデバイスタイプに影響されません。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IController.NormalizedRightTrigger">
            <summary>
            正規化された右トリガーの値を取得します。このプロパティは使用しているデバイスタイプに影響されません。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IController.DPadUp">
            <summary>十字キー上</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IController.DPadDown">
            <summary>十字キー下</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IController.DPadLeft">
            <summary>十字キー左</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IController.DPadRight">
            <summary>十字キー右</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IController.DPadUpRight">
            <summary>十字キー右上</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IController.DPadDownRight">
            <summary>十字キー右下</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IController.DPadUpLeft">
            <summary>十字キー左上</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IController.DPadDownLeft">
            <summary>十字キー左下</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IController.Start">
            <summary>スタート</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IController.Back">
            <summary>セレクト</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IController.LeftStickPush">
            <summary>左スティック押し込み</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IController.RightStickPush">
            <summary>右スティック押し込み</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IController.LB">
            <summary>L1</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IController.RB">
            <summary>L2</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IController.A">
            <summary>✕</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IController.B">
            <summary>○</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IController.X">
            <summary>□</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IController.Y">
            <summary>△</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IController.LT">
            <summary>左トリガー </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IController.RT">
            <summary>右トリガー</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IController.ExButton1">
            <summary>拡張ボタン1</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IController.ExButton2">
            <summary>拡張ボタン2</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IController.ExButton3">
            <summary>拡張ボタン3</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IController.ExButton4">
            <summary>拡張ボタン4</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IController.ExButton5">
            <summary>拡張ボタン5</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IController.ExButton6">
            <summary>拡張ボタン6</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IController.ExButton7">
            <summary>拡張ボタン7</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IController.ExButton8">
            <summary>拡張ボタン8</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IController.ExButton9">
            <summary>拡張ボタン9</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IController.ExButton10">
            <summary>拡張ボタン10</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IController.ExButton11">
            <summary>拡張ボタン11</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IController.ExButton12">
            <summary>拡張ボタン12</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IController.ExButton13">
            <summary>拡張ボタン13</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IController.ExButton14">
            <summary>拡張ボタン14</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IController.ExButton15">
            <summary>拡張ボタン15</summary>
        </member>
        <member name="M:KeyToKey.Plugins.IController.GetStateAt(System.Int32)">
            <summary>
            DeviceTypeがDirectInputのときにのみ使用できます。
            ボタンが押されているかどうかを取得します。
            </summary>
            <param name="index">0～128</param>
            <returns>押されているかどうか</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IController.GetState(KeyToKey.Enums.ControllerButtons)">
            <summary>
            コントローラーのボタンが押されているかどうかを取得します。
            </summary>
            <param name="button">ボタン</param>
            <returns>押されているかどうか</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IController.FindController(System.Predicate{System.ValueTuple{System.String,System.Guid}})">
            <summary>
            接続中のコントローラーを取得します。
            </summary>
            <param name="predicate">[条件]x => x.DeviceName == </param>
            <returns><seealso cref="T:KeyToKey.Plugins.IController"/> のインスタンス</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IController.GetXInputController(System.Int32)">
            <summary>
            XInputのコントローラーを取得します。
            </summary>
            <param name="userIndex">0～3</param>
            <returns><seealso cref="T:KeyToKey.Plugins.IController"/> のインスタンス</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IController.GetDirectInputController(KeyToKey.Plugins.IDirectInputDevice)">
            <summary>
            
            </summary>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:KeyToKey.Plugins.IController.ListDirectInputDevices">
            <summary>
            DirectInputDeviceの一覧を取得します。
            </summary>
            <param name="userIndex">0～3</param>
            <returns>DirectInputDeviceの一覧</returns>
        </member>
        <member name="T:KeyToKey.Plugins.ITriggerState">
            <summary>
            コントローラーのトリガー
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.ITriggerState.IsEnabled">
            <summary>
            トリガーが有効かどうかを取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.ITriggerState.Thumb">
            <summary>
            トリガーの入力値を取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.ITriggerState.DeadZone">
            <summary>
            トリガーのデッドゾーンを取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.ITriggerState.ThumbAsByte">
            <summary>
            トリガーの入力値をbyte型で取得します。
            </summary>
        </member>
        <member name="T:KeyToKey.Plugins.IStickState">
            <summary>
            コントローラーのスティック
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IStickState.Angle">
            <summary>
            スティックの角度（右回り0～359）
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IStickState.DistanceRate">
            <summary>
            スティックの中心からの距離（0.0～1.0）
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IStickState.DeadZone">
            <summary>
            スティックのデッドゾーン
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IStickState.Thumb">
            <summary>
            スティックの値
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IStickState.ThumbAsShort">
            <summary>
            スティックの値をshort型で取得します。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IStickState.GetAngle(System.Boolean)">
            <summary>
            スティックの角度を取得します（0～359）
            </summary>
            <param name="isClockwise">false:左回り, true:右回り</param>
            <returns>スティックの角度</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IStickState.IsOverDeadZone">
            <summary>
            スティックの値（縦と横どちらか）がデッドゾーンを超えているかどうかを取得します。
            </summary>
            <returns>true:超えている, false:超えていない</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IStickState.IsOverDeadZone(System.Int32)">
            <summary>
            /// 指定されたスティックの値がデッドゾーンを超えているかどうかを取得します。
            </summary>
            <param name="thumb">スティックの値</param>
            <returns>true:超えている, false:超えていない</returns>
        </member>
        <member name="T:KeyToKey.Plugins.INormalizedStickState">
            <summary>
            正規化されたスティックの値
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.INormalizedStickState.Angle">
             <summary>
            （Horizontal: 0.0, Vertical: 0.0）を中心とする上が0.0で時計回りの角度（0.0～359.9）を取得します。
             </summary>
        </member>
        <member name="P:KeyToKey.Plugins.INormalizedStickState.DistanceFromCenter">
            <summary>
            中心（Horizontal: 0.0, Vertical: 0.0）からの距離（0.0～1.0）
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.INormalizedStickState.DeadZone">
            <summary>
            スティックのデッドゾーン（0.0～1.0）
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.INormalizedStickState.Horizontal">
            <summary>
            水平の値（-1.0[左]～1.0[右]）
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.INormalizedStickState.Vertical">
            <summary>
            垂直の値（-1.0[上]～1.0[下]）
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.INormalizedStickState.DirectInput">
            <summary>
            DirectInput用に正規化されたスティックの値
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.INormalizedStickState.GetAngle(System.Boolean)">
             <summary>
            （Horizontal: 0.0, Vertical: 0.0）を中心とする上が0.0（0.0～359.9）を取得します。
             </summary>
             <param name="isClockwise">false:左回り, true:右回り</param>
             <returns>スティックの角度</returns>
        </member>
        <member name="P:KeyToKey.Plugins.INormalizedStickState.IsOverDeadZone">
            <summary>
            スティックの値がデッドゾーンを超えているかどうかを取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.INormalizedStickState.Direction">
            <summary>
            スティックの入力方向
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.INormalizedStickState.DirectionWhenOverDeadZone">
            <summary>
            スティックの値がデッドゾーンを超えていた場合の入力方向を取得します。超えていない場合はStick.Directions.Neutralを返します。
            </summary>
        </member>
        <member name="T:KeyToKey.Plugins.INormalizedDirectInputStickState">
            <summary>
            DirectInput用に正規化されたスティックの値
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.INormalizedDirectInputStickState.Horizontal">
            <summary>
            DirectInput用水平の値（0.0～0.5～1.0）
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.INormalizedDirectInputStickState.Vertical">
            <summary>
            DirectInput用垂直の値（0.0～0.5～1.0）
            </summary>
        </member>
        <member name="T:KeyToKey.Plugins.INormalizedTriggerState">
            <summary>
            正規化されたトリガーの値
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.INormalizedTriggerState.Value">
            <summary>
            トリガーの値（0.0～1.0）
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.INormalizedTriggerState.DeadZone">
            <summary>
            スティックのデッドゾーン（0.0～1.0）
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.INormalizedTriggerState.IsOverDeadZone">
            <summary>
            スティックの値がデッドゾーンを超えているかどうかを取得します。
            </summary>
        </member>
        <member name="T:KeyToKey.Plugins.StickDirections">
            <summary>
            スティックの入力方向
            </summary>
        </member>
        <member name="F:KeyToKey.Plugins.StickDirections.Neutral">
            <summary>ニュートラル</summary>
        </member>
        <member name="F:KeyToKey.Plugins.StickDirections.Up">
            <summary>上</summary>
        </member>
        <member name="F:KeyToKey.Plugins.StickDirections.UpRight">
            <summary>右上</summary>
        </member>
        <member name="F:KeyToKey.Plugins.StickDirections.Right">
            <summary>右</summary>
        </member>
        <member name="F:KeyToKey.Plugins.StickDirections.DownRight">
            <summary>右下</summary>
        </member>
        <member name="F:KeyToKey.Plugins.StickDirections.Down">
            <summary>下</summary>
        </member>
        <member name="F:KeyToKey.Plugins.StickDirections.DownLeft">
            <summary>左下</summary>
        </member>
        <member name="F:KeyToKey.Plugins.StickDirections.Left">
            <summary>左</summary>
        </member>
        <member name="F:KeyToKey.Plugins.StickDirections.UpLeft">
            <summary>左上</summary>
        </member>
        <member name="T:KeyToKey.Plugins.IControllerButtonState">
            <summary>
            コントローラーのボタン
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IControllerButtonState.IsPressed">
            <summary>
            押されているかどうか
            </summary>
        </member>
        <member name="T:KeyToKey.Plugins.DPadDirections">
            <summary>
            十字キーの入力方向
            </summary>
        </member>
        <member name="F:KeyToKey.Plugins.DPadDirections.Neutral">
            <summary>ニュートラル</summary>
        </member>
        <member name="F:KeyToKey.Plugins.DPadDirections.Up">
            <summary>上</summary>
        </member>
        <member name="F:KeyToKey.Plugins.DPadDirections.UpRight">
            <summary>右上</summary>
        </member>
        <member name="F:KeyToKey.Plugins.DPadDirections.Right">
            <summary>右</summary>
        </member>
        <member name="F:KeyToKey.Plugins.DPadDirections.DownRight">
            <summary>右下</summary>
        </member>
        <member name="F:KeyToKey.Plugins.DPadDirections.Down">
            <summary>下</summary>
        </member>
        <member name="F:KeyToKey.Plugins.DPadDirections.DownLeft">
            <summary>左下</summary>
        </member>
        <member name="F:KeyToKey.Plugins.DPadDirections.Left">
            <summary>左</summary>
        </member>
        <member name="F:KeyToKey.Plugins.DPadDirections.UpLeft">
            <summary>左上</summary>
        </member>
        <member name="T:KeyToKey.Plugins.IGlobals">
            <summary>
            KeyToKeyの基本的な機能を提供します。
            </summary>
        </member>
        <member name="E:KeyToKey.Plugins.IGlobals.IsEnabledChanged">
            <summary>
            IsEnabledの値が変わったら発生します。
            </summary>
        </member>
        <member name="E:KeyToKey.Plugins.IGlobals.IsAvailableChanged">
            <summary>
            IsAvailableの値が変わったら発生します。
            </summary>
        </member>
        <member name="E:KeyToKey.Plugins.IGlobals.CanWorkOnActiveWindowChanged">
            <summary>
            CanWorkOnActiveWindowの値が変わったら発生します。
            </summary>
        </member>
        <member name="E:KeyToKey.Plugins.IGlobals.ShouldContinueChanged">
            <summary>
            ShouldContinueの値が変わったら発生します。
            </summary>
        </member>
        <member name="E:KeyToKey.Plugins.IGlobals.KeyPressed">
            <summary>
            キー／マウスのボタンが押されたら発生します。
            </summary>
        </member>
        <member name="E:KeyToKey.Plugins.IGlobals.KeyReleased">
            <summary>
            キー／マウスのボタンが離されたら発生します。
            </summary>
        </member>
        <member name="E:KeyToKey.Plugins.IGlobals.TriggerReleased">
            <summary>
            トリガーが離されたら発生します。
            </summary>
        </member>
        <member name="E:KeyToKey.Plugins.IGlobals.TriggerPressed">
            <summary>
            トリガーが押されたら発生します。
            </summary>
        </member>
        <member name="E:KeyToKey.Plugins.IGlobals.KeyStateChanged">
            <summary>
            キーが入力されたら発生します。
            </summary>
        </member>
        <member name="E:KeyToKey.Plugins.IGlobals.ControllerStateChanged">
            <summary>
            コントローラーのボタンが入力されたら発生します。
            </summary>
        </member>
        <member name="E:KeyToKey.Plugins.IGlobals.Hooked">
            <summary>
            キーボードとマウスが入力されたら発生します。
            </summary>
        </member>
        <member name="E:KeyToKey.Plugins.IGlobals.Disposing">
            <summary>
            解放処理時が実行されたら発生します。
            </summary>
        </member>
        <member name="E:KeyToKey.Plugins.IGlobals.MouseMoving">
            <summary>
            マウスが移動したら発生します。
            </summary>
        </member>
        <member name="E:KeyToKey.Plugins.IGlobals.BroadcastReceived">
            <summary>
            SendBoradcastメソッドを実行すると発生します。スクリプトやプロファイル間でのメッセージの送受信に使われます。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.this">
            <summary>
            KeyToKeyの基本的な機能を提供します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.base">
            <summary>
            KeyToKeyの基本的な機能を提供します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.ScriptConfig">
            <summary>
            スクリプトの設定
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.WaitConfig">
            <summary>
            待機処理の設定
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.MoveMethodOptions">
            <summary>
            Moveメソッドのオプション
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.Profile">
            <summary>
            プロファイル
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.Key">
            <summary>
            キー
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.Controller">
            <summary>
            コントローラー
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.InjectedStatus">
            <summary>
            アプリケーションによって入力されたキーの状態
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.PhysicalStatus">
            <summary>
            物理キーボード（ドライバ）によって入力されたキーの状態
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.MouseAsLeftStick">
            <summary>
            マウスで左スティックを動かす機能を提供します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.MouseAsRightStick">
            <summary>
            マウスで左スティックを動かす機能を提供します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.MouseVirtualPositionService">
            <summary>
            IMouseVirtualPositionService
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.Clipboard">
            <summary>
            クリップボード
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.Window">
            <summary>
            ウィンドウ
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.IME">
            <summary>
            IME
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.TemplateMatching">
            <summary>
            テンプレートマッチング
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.Macro">
            <summary>
            マクロ
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.VirtualXInput">
            <summary>
            仮想XInput
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.vJoy">
            <summary>
            vJoy
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.DualShock4">
            <summary>
            仮想DualShock4コントローラー
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.XInput">
            <summary>
            XInputコントローラー
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.QuickLauncher">
            <summary>
            クイックランチャー
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.SharedResources">
            <summary>
            リソースを保持しておくためのプロパティです。<para/>
            SharedResourcesの値は全プロファイルで共有されます。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.LocalVariables">
            <summary>
            ローカル変数の操作取得を行います（ローカル変数には引数も含まれています）
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.GlobalVariables">
            <summary>
            グローバル変数の操作取得を行います。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.ShouldContinue">
            <summary>
            スクリプトを続行するべきかどうかを取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.IsEnabled">
            <summary>
            KeyToKeyの有効状態かどうかを取得または設定をします。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.IsTriggerReleased">
            <summary>
            トリガーが離されたかどうかを取得します。このプロパティは一度falseになったら再度トリガーが押されてもtrueになることはありません。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.CanStop">
            <summary>
            トリガーが離されたタイミングでマクロの実行を停止できるかどうかを取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.IsAvailable">
            <summary>
            現在のアクティブウィンドウで実行可能かどうかを取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.CanWorkOnActiveWindow">
            <summary>
            現在のアクティブウィンドウで実行可能かどうかを取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.IsMouseMovementBlocked">
            <summary>
            マウスの移動がブロックされているかどうかを取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.IsKeyboardHooked">
            <summary>
            キーボードがフックされているかどうかを取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.IsMouseHooked">
            <summary>
            マウスがフックされているかどうかを取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.Elapsed">
            <summary>
            アクションが呼ばれてからの経過時間を取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.Trigger">
            <summary>
            トリガー
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.Modifier">
            <summary>
            修飾子
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.Screen">
            <summary>
            モニターの情報
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.GetBoundsByWindow(KeyToKey.Plugins.Bounds)">
            <summary>
            選択ウィドウを使って位置とサイズを取得します。選択せずにウィンドウを閉じた場合はnullを返します。
            </summary>
            <param name="defaultBounds">開始位置</param>
            /// <returns>選択した範囲。キャンセルした場合はnullを返します。</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.GetBoundsByWindow(KeyToKey.Enums.WindowPopLocation)">
            <summary>
            選択ウィドウを使って位置とサイズを取得します。選択せずにウィンドウを閉じた場合はnullを返します。
            </summary>
            <param name="pop">ウィンドウの初期位置を指定します。</param>
            <returns>選択した範囲。キャンセルした場合はnullを返します。</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.SendBroadcast(System.String,System.String)">
            <summary>
            スクリプトやプロファイル間でメッセージを送受信するためのメソッドです。実行するとプロファイルを問わず、すべてのスクリプトでBroadcastReceivedイベントが発生します。
            </summary>
            <param name="channel">任意の文字列。送信する側と受信する側で取り決めてください。</param>
            <param name="message">送信するメッセージ</param>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.BlockKeys(KeyToKey.Enums.Keys[])">
            <summary>
            指定したキー（マウスのボタン入力、ホイールスクロールなども含まれます）をブロックします。ブロックはプロファイルが有効かつアクティブウィンドウで実行可能である場合に機能します。
            </summary>
            <param name="keys">ブロックするキー</param>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.BlockKeysWithout(KeyToKey.Enums.Keys[])">
            <summary>
            指定したキー以外のキー（マウスのボタン入力、ホイールスクロールなども含まれます）をブロックします。ブロックはプロファイルが有効かつアクティブウィンドウで実行可能である場合に機能します。
            </summary>
            <param name="keys">ブロックしないキー</param>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.BlockMouseMovement">
            <summary>
            マウスの移動をブロックします。ブロックはプロファイルが有効かつアクティブウィンドウで実行可能である場合に機能します。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.UnblockKeys(KeyToKey.Enums.Keys[])">
            <summary>
            指定したキーのブロックを解除します。
            </summary>
            <param name="keys">ブロックを解除するキー</param>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.UnblockKeysWithout(KeyToKey.Enums.Keys[])">
            <summary>
            指定したキー以外のキーのブロックを解除します。
            </summary>
            <param name="keys">ブロックを解除しないキー</param>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.UnblockAllKeys">
            <summary>
            すべてのキーのブロックを解除します。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.UnblockMouseMovement">
            <summary>
            マウスの移動のブロックを解除します。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.IsKeyBlocked(KeyToKey.Enums.Keys[])">
            <summary>
            キーがブロックされているかどうかを取得します。複数キーを指定した場合はすべてのキーがブロックされていたらtrueを返します。
            </summary>
            <param name="keys">キー</param>
            <returns>ブロックされているかどうか</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Wait">
            <summary>
            Cancelメソッドが呼び出されるまで待機します。
            </summary>
            <returns>キャンセルされた場合はTrue</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Wait(System.Int32)">
            <summary>
            指定した時間待機します。Cancelメソッドで待機をキャンセルできます。
            </summary>
            <returns>キャンセルされた場合はTrue</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Wait(System.TimeSpan)">
            <summary>
            指定した時間待機します。Cancelメソッドで待機をキャンセルできます。
            </summary>
            <returns>キャンセルされた場合はTrue</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.WaitForInput(KeyToKey.Enums.Keys,System.Boolean)">
            <summary>
            指定されたキーやマウスのボタンが入力されるまで待機します。
            </summary>
            <param name="key">キー</param>
            <param name="whenDown">true:ダウン時, false:アップ時</param>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.WaitForInput(KeyToKey.Enums.Keys,KeyToKey.Enums.Keys,System.Boolean)">
            <summary>
            指定されたキーやマウスのボタンが入力されるまで待機します。
            </summary>
            <param name="key1">キー1</param>
            <param name="key2">キー2</param>
            <param name="whenDown">true:ダウン時, false:アップ時</param>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.WaitForInput(KeyToKey.Enums.ControllerButtons,System.Boolean)">
            <summary>
            指定されたコントローラーのボタンが入力されるまで待機します。
            </summary>
            <param name="button">コントローラーのボタン</param>
            <param name="whenDown">true:ダウン時, false:アップ時</param>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.WaitForInput(KeyToKey.Enums.ControllerButtons,KeyToKey.Enums.ControllerButtons,System.Boolean)">
            <summary>
            指定されたコントローラーのボタンが入力されるまで待機します。
            </summary>
            <param name="button1">コントローラーのボタン1</param>
            <param name="button2">コントローラーのボタン2</param>
            <param name="whenDown">true:ダウン時, false:アップ時</param>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Cancel">
            <summary>
            Wait系メソッドをキャンセルします。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Invoke(System.Action)">
            <summary>
            UIスレッドでデリゲートを実行します。
            </summary>
            <param name="callback">デリゲート</param>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Invoke``1(System.Func{``0})">
            <summary>
            UIスレッドでデリゲートを実行し、戻り値を取得します。
            </summary>
            <typeparam name="T">任意の型</typeparam>
            <param name="callback">デリゲート</param>
            <returns></returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Random(System.Int32,System.Int32)">
            <summary>
            指定した範囲のランダムな値を取得します。
            </summary>
            <param name="minValue">最小値</param>
            <param name="maxValue">最大値</param>
            <returns>指定した範囲のランダムな値</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.RandomDouble">
            <summary>
            0.0～1.0のランダムな値を取得します。
            </summary>
            <returns>指定した範囲のランダムな値</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.TryParse``1(System.String,``0@)">
            <summary>
            KeyToKey側の値を解析・取得します。
            </summary>
            <typeparam name="T">型</typeparam>
            <param name="syntax">KeyToKey側の値</param>
            <param name="result">結果</param>
            <returns>解析に成功したか</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.NotifyMessage(System.String,System.Int32)">
            <summary>
            メインウィンドウにメッセージを表示させます。
            </summary>
            <param name="message">表示するメッセージ</param>
            <param name="showingTime">表示している時間</param>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.ChangeFile(System.String)">
            <summary>
            設定ファイルを変更します。
            </summary>
            <param name="fileNameWithoutExtension">ファイル名（.と拡張子なし）</param>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.ChangeProfile(System.String)">
            <summary>
            プロファイルを変更します。
            </summary>
            <param name="profileName">プロファイルの名前</param>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.SetScheduleState(System.String,System.Boolean)">
            <summary>
            割り当て設定（時間）の有効／無効を設定します。true:有効、false:無効
            </summary>
            <param name="identifier">設定の識別キー</param>
            <param name="isEnabled">状態</param>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.GetScheduleState(System.String)">
            <summary>
            割り当て設定（時間）の状態を取得します。true:有効、false:無効
            </summary>
            <param name="identifier">設定の識別キー</param>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.ThrowIfShouldNotContinue">
            <summary>
            ShouldContinueプロパティがFalseであれば例外を投げます。
            </summary>
            <exception cref="T:System.OperationCanceledException"></exception>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.SetEventLockState(KeyToKey.Enums.Keys,System.Boolean)">
            <summary>
            入力ロックの設定を行います。
            </summary>
            <param name="key">キー</param>
            <param name="isLock">true:ロック false:アンロック</param>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.GetEventLockState(KeyToKey.Enums.Keys)">
            <summary>
            入力ロックの状態を取得します。
            </summary>
            <param name="key">キー</param>
            <returns>true:ロック false:アンロック</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Replay(System.String)">
            <summary>
            入力の記録ファイルを再生します。
            </summary>
            <param name="logFile">ログファイルのパス</param>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.CreateDirectory(System.String[])">
            <summary>
            ディレクトを作成します。
            </summary>
            <param name="path">作成するディレクトリのパス</param>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.ToJson(System.Object,System.Boolean)">
            <summary>
            値をJSON形式の文字列に変換します。
            </summary>
            <param name="value">値</param>
            <param name="formatted">JSONを整形するかどうか</param>
            <returns>JSON</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.FromJson``1(System.String)">
            <summary>
            JSON形式から指定した型の値に変換します。
            </summary>
            <typeparam name="T">値の型</typeparam>
            <param name="json">JSON形式の文字列</param>
            <returns>値</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Screenshot(System.Int32,System.Int32,System.Int32,System.Int32,KeyToKey.Enums.PixelFormats)">
            <summary>
            指定した位置と範囲のスクリーンショットをBitmapで取得します。
            </summary>
            <param name="left">横の座標</param>
            <param name="top">縦の座標</param>
            <param name="width">横の範囲</param>
            <param name="height">縦の範囲</param>
            <param name="pixelFormat">ピクセルの形式</param>
            <returns>Bitmapのインスタンス</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Screenshot(KeyToKey.Plugins.Bounds,KeyToKey.Enums.PixelFormats)">
            <summary>
            指定した位置と範囲のスクリーンショットをBitmapで取得します。
            </summary>
            <param name="bounds">位置と範囲</param>
            <param name="pixelFormat">ピクセルの形式</param>
            <returns>Bitmapのインスタンス</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Screenshot(System.String,KeyToKey.Plugins.Bounds)">
            <summary>
            指定した位置と範囲のスクリーンショットを画像認識のテンプレート画像と同じフォーマットのBitmapで取得します。
            </summary>
            <param name="identifier">画像認識の設定</param>
            <param name="bounds">位置と範囲</param>
            <returns>Bitmapのインスタンス</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.ScreenshotAsync(KeyToKey.Plugins.Bounds,KeyToKey.Enums.PixelFormats)">
            <summary>
            指定した位置と範囲のスクリーンショットをBitmapで取得します。
            </summary>
            <param name="bounds">位置と範囲</param>
            <param name="pixelFormat">ピクセルの形式</param>
            <returns>Bitmapのインスタンス</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.ScreenshotAsTemplateMatchingImage(KeyToKey.Plugins.Bounds,KeyToKey.Enums.PixelFormats,System.Boolean)">
            <summary>
            指定した位置と範囲のスクリーンショットをITemplateMatchingImageで取得します。
            </summary>
            <param name="bounds">位置と範囲</param>
            <param name="pixelFormat">ピクセルの形式</param>
            <param name="grayscale">グレースケール</param>
            <returns>ITemplateMatchingImageのインスタンス</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.IsTrigger(KeyToKey.Enums.Keys)">
            <summary>
            指定した値がトリガーの値と一致するかどうかを取得します。
            </summary>
            <param name="key">キー／マウス</param>
            <returns>一致:true 不一致:false</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.IsTrigger(KeyToKey.Enums.ControllerButtons)">
            <summary>
            指定した値がトリガーの値と一致するかどうかを取得します。
            </summary>
            <param name="button">コントローラーのボタン／スティック／トリガー</param>
            <returns>一致:true 不一致:false</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Abort">
            <summary>
            C#スクリプトを強制終了させます。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.CreateWaiter(System.Boolean)">
            <summary>
            待機処理を行うインスタンスを生成します。
            </summary>
            <param name="highPrecision">高精度／高負荷な待機処理を使用するかどうか</param>
            <returns>IWaiterのインスタンス</returns>
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.CallCount">
            <summary>
            <seealso cref="M:KeyToKey.Plugins.IGlobals.CallNext(System.Action[])"/>メソッドが呼ばれた回数
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.CallNext(System.Action[])">
            <summary>
            <para>メソッドが呼び出された回数を数え回数に対応するデリゲートを実行します。</para>
            例えば3つのデリゲートをメソッドに渡した場合、はじめにメソッドを呼び出した時には1つめのデリゲートが実行されます。2回目は2つ目のデリゲート、3回目は3つ目のデリゲートが実行され、次に呼び出し時は最初に戻ります。
            </summary>
            <param name="callbacks">実行するデリゲート</param>
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.Item(System.String)">
            <summary>
            SharedResources
            </summary>
            <param name="Key">リソースのキー</param>
            <returns></returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.ReadQrCode(System.Drawing.Bitmap)">
            <summary>
            QRコードの画像から文字列を読み取ります。
            </summary>
            <param name="bitmap">QRコードの画像</param>
            <returns>読み取った文字列</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.ReadQrCode(KeyToKey.Plugins.Bounds)">
            <summary>
            指定した範囲をキャプチャしてQRコードを読み取ります。
            </summary>
            <param name="bounds">キャプチャ範囲</param>
            <returns>読み取った文字列</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.CreateQrCodeImage(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            文字列からQRコードの画像を作成します。
            </summary>
            <param name="text">文字列</param>
            <param name="width">横のサイズ</param>
            <param name="height">縦のサイズ</param>
            <param name="margin">余白</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Down(KeyToKey.Enums.Keys,System.Int32,System.Boolean)">
            <summary>
            キー／マウスのボタン／マウスのボタンを押します。
            </summary>
            <param name="key">キー／マウスのボタン</param>
            <param name="interval">押した後の待機時間</param>
            <param name="eventCancel">キー／マウスのボタンの入力イベントをキャンセルするか</param>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Up(KeyToKey.Enums.Keys,System.Int32,System.Boolean)">
            <summary>
            キー／マウスのボタンを離します。
            </summary>
            <param name="key">キー／マウスのボタン</param>
            <param name="interval">離した後の待機時間</param>
            <param name="eventCancel">キー／マウスのボタンの入力イベントをキャンセルするか</param>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Tap(KeyToKey.Enums.Keys,System.Int32,System.Int32,System.Boolean)">
            <summary>
            キー／マウスのボタンを押して離します。
            </summary>
            <param name="key">キー／マウスのボタン</param>
            <param name="interval1">押した後の待機時間</param>
            <param name="interval2">離した後の待機時間</param>
            <param name="eventCancel">キー／マウスのボタンの入力イベントをキャンセルするか</param>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.InputText(System.String,System.Int32)">
            <summary>
            文字列を入力します。
            </summary>
            <param name="text">入力する文字</param>
            <param name="interval">1文字入力するごとに待機する時間</param>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Move(System.Int32,System.Int32,System.Int32)">
            <summary>マウスカーソルを指定した位置へ移動させます。</summary>
            <param name="x">横の座標</param>
            <param name="y">縦の座標</param>
            <param name="interval">移動後の待機時間</param>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Move(System.ValueTuple{System.Int32,System.Int32},System.Int32)">
            <summary>
            マウスカーソルを指定した位置へ移動させます。
            </summary>
            <param name="position">移動先の座標（タプル）</param>
            <param name="interval">移動後の待機時間</param>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.MoveWithSteps(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>マウスカーソルを指定した位置へ移動させます。</summary>
            <param name="destX">横の座標</param>
            <param name="destY">縦の座標</param>
            <param name="maxSteps">ステップ数</param>
            <param name="wait">ステップ毎に待機する時間</param>
            <param name="smooth">スムーズ移動</param>
            <param name="useApi">APIの使用</param>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.MoveWithSteps(System.ValueTuple{System.Int32,System.Int32},System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>マウスカーソルを指定した位置へ移動させます。</summary>
            <param name="position">移動先の座標（タプル）</param>
            <param name="maxSteps">ステップ数</param>
            <param name="wait">ステップ毎に待機する時間</param>
            <param name="smooth">スムーズ移動</param>
            <param name="useApi">APIの使用</param>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Offset(System.Int32,System.Int32,System.Int32)">
            <summary>マウスカーソルを指定した分だけ移動させます。</summary>
            <param name="x">横の座標</param>
            <param name="y">縦の座標</param>
            <param name="interval">移動後の待機時間</param>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Offset(System.ValueTuple{System.Int32,System.Int32},System.Int32)">
            <summary>
            マウスカーソルを指定した分だけ移動させます。
            </summary>
            <param name="amount">移動量（タプル）</param>
            <param name="interval">移動後の待機時間</param>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.OffsetWithSteps(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>マウスカーソルを指定した分だけ移動させます。</summary>
            <param name="destX">横の座標</param>
            <param name="destY">縦の座標</param>
            <param name="maxSteps">ステップ数</param>
            <param name="wait">ステップ毎に待機する時間</param>
            <param name="smooth">スムーズ移動</param>
            <param name="useApi">APIの使用</param>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.OffsetWithSteps(System.ValueTuple{System.Int32,System.Int32},System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>マウスカーソルを指定した分だけ移動させます。</summary>
            <param name="amount">移動量（タプル）</param>
            <param name="maxSteps">ステップ数</param>
            <param name="wait">ステップ毎に待機する時間</param>
            <param name="smooth">スムーズ移動</param>
            <param name="useApi">APIの使用</param>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.WheelUp(System.Int32)">
            <summary>ホイール上</summary>
            <param name="delta">移動量</param>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.WheelDown(System.Int32)">
            <summary>ホイール下</summary>
            <param name="delta">移動量</param>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.WheelLeft(System.Int32)">
            <summary>ホイール左</summary>
            <param name="delta">移動量</param>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.WheelRight(System.Int32)">
            <summary>ホイール右</summary>
            <param name="delta">移動量</param>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.GetCursorPosition">
            <summary>
            マウスカーソルの位置を取得します。
            </summary>
            <returns>マウスカーソルの位置（タプル）</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.IsPressed(KeyToKey.Enums.Keys)">
            <summary>
            キー／マウスのボタンが押されているかどうかを取得します。
            </summary>
            <param name="key">キー／マウスのボタン</param>
            <returns>押されていたらTrue、離されていたらFalseを返します。</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.IsPressed(KeyToKey.Enums.ControllerButtons)">
            <summary>
            コントローラーのボタンが押されているかどうかを取得します。
            </summary>
            <param name="button">コントローラーのボタン</param>
            <returns>押されていたらTrue、離されていたらFalseを返します。</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.GetAsyncKeyState(KeyToKey.Enums.Keys)">
            <summary>
            キー／マウスのボタンが押されているかどうかを取得します。
            </summary>
            <param name="key">キー／マウスのボタン</param>
            <returns>押されていたらTrue、離されていたらFalseを返します。</returns>
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.IsTriggerPressed">
            <summary>
            割り当てのトリガーが押されているかどうかを取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.IsModifiersPressed">
            <summary>
            割り当ての修飾キー／ボタンが押されているかどうかを取得します。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.SetTextToClipboard(System.String)">
            <summary>
            クリップボードにテキストをセットします。
            ※セットに失敗することがあります。
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.GetTextFromClipboard">
            <summary>
            クリップボードからテキストを取得します。
            </summary>
            <returns></returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.LoadTemplateMatchingImage(System.String,System.Boolean)">
            <summary>
            画像認識に使用する画像を読み込みます。
            </summary>
            <param name="path">画像ファイルのパス</param>
            <param name="grayscale">画像をグレースケール化します。</param>
            <returns>画像認識に使用する画像</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Match(System.String,KeyToKey.Plugins.MatchResult@)">
            <summary>
            テンプレート画像に類似する一つの画像を探します。
            </summary>
            <param name="identifier">識別キー</param>
            <param name="Result">結果</param>
            <returns>類似画像が見つかったかどうかを返します。</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Match(System.String,System.Drawing.Bitmap,KeyToKey.Plugins.MatchResult@)">
            <summary>
            テンプレート画像に類似する一つの画像を探します。
            </summary>
            <param name="identifier">識別キー</param>
            <param name="sourceImage">探索元の画像</param>
            <param name="result">探索結果</param>
            <returns>類似画像が見つかったかどうかを返します。</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Match(System.String,KeyToKey.Plugins.ITemplateMatchingImage,KeyToKey.Plugins.MatchResult@)">
            <summary>
            テンプレート画像に類似する一つの画像を探します。
            </summary>
            <param name="identifier">識別キー</param>
            <param name="sourceImage">探索元の画像</param>
            <param name="result">探索結果</param>
            <returns>類似画像が見つかったかどうかを返します。</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Match(System.String,KeyToKey.Plugins.Bounds,KeyToKey.Plugins.MatchResult@)">
            <summary>
            テンプレート画像に類似する一つの画像を探します。
            </summary>
            <param name="identifier">識別キー</param>
            <param name="bounds">探索範囲</param>
            <param name="result">探索結果</param>
            <returns>類似画像が見つかったかどうかを返します。</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Match(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,KeyToKey.Plugins.MatchResult@)">
            <summary>
            テンプレート画像に類似する一つの画像を探します。
            </summary>
            <param name="templateImageFilePath">テンプレート画像のファイルパス(.png, .jpg, .bmp)</param>
            <param name="x">探索する横の座標</param>
            <param name="y">探索する縦の座標</param>
            <param name="width">探索する横の範囲</param>
            <param name="height">探索する縦の範囲</param>
            <param name="threshold">類似度（0.0～1.0）。どれくらいの数値になれば類似画像としてみなすかどうかを決める値です。1.0に近いほど類似性が高いことを示します。</param>
            <param name="result">探索結果</param>
            <returns>類似画像が見つかったかどうかを返します。</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Match(System.String,System.Double,KeyToKey.Plugins.Bounds,KeyToKey.Plugins.MatchResult@)">
            <summary>
            テンプレート画像に類似する一つの画像を探します。
            </summary>
            <param name="templateImageFilePath">テンプレート画像のファイルパス(.png, .jpg, .bmp)</param>
            <param name="threshold">類似度（0.0～1.0）どれくらいの数値になれば類似画像としてみなすかどうかを決める値です。1.0に近いほど類似性が高いことを示します。</param>
            <param name="bounds">位置と範囲</param>
            <param name="result">探索結果</param>
            <returns>類似画像が見つかったかどうかを返します。</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Match(System.Drawing.Bitmap,System.Double,KeyToKey.Plugins.Bounds,KeyToKey.Plugins.MatchResult@)">
            <summary>
            テンプレート画像に類似する一つの画像を探します。
            </summary>
            <param name="templateImage">テンプレート画像</param>
            <param name="threshold">類似度（0.0～1.0）どれくらいの数値になれば類似画像としてみなすかどうかを決める値です。1.0に近いほど類似性が高いことを示します。</param>
            <param name="bounds">探索する位置と範囲</param>
            <param name="result">探索結果</param>
            <returns>類似画像が見つかったかどうかを返します。</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Match(System.Drawing.Bitmap,System.Drawing.Bitmap,System.Double,KeyToKey.Plugins.MatchResult@)">
            <summary>
            テンプレート画像に類似する一つの画像を探します。
            </summary>
            <param name="templateImage">テンプレート画像</param>
            <param name="sourceImage">探索元の画像</param>
            <param name="threshold">類似度（0.0～1.0）どれくらいの数値になれば類似画像としてみなすかどうかを決める値です。1.0に近いほど類似性が高いことを示します。</param>
            <param name="result">探索結果</param>
            <returns>類似画像が見つかったかどうかを返します。</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Match(KeyToKey.Plugins.ITemplateMatchingImage,KeyToKey.Plugins.ITemplateMatchingImage,System.Double,KeyToKey.Plugins.MatchResult@)">
            <summary>
            テンプレート画像に類似する一つの画像を探します。
            </summary>
            <param name="templateImage">テンプレート画像</param>
            <param name="sourceImage">探索元の画像</param>
            <param name="threshold">類似度（0.0～1.0）どれくらいの数値になれば類似画像としてみなすかどうかを決める値です。1.0に近いほど類似性が高いことを示します。</param>
            <param name="result">探索結果</param>
            <returns>類似画像が見つかったかどうかを返します。</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Matches(System.String,System.Collections.Generic.IEnumerable{KeyToKey.Plugins.MatchResult}@)">
            <summary>
            テンプレート画像に類似する複数の画像を探します。
            </summary>
            <param name="identifier">識別キー</param>
            <param name="Results">結果</param>
            <returns>類似画像が見つかったかどうかを返します。</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Matches(System.String,KeyToKey.Plugins.Bounds,System.Collections.Generic.IEnumerable{KeyToKey.Plugins.MatchResult}@)">
            <summary>
            テンプレート画像に類似する複数の画像を探します。
            </summary>
            <param name="identifier">識別キー</param>
            <param name="bounds">探索範囲</param>
            <param name="Results">結果</param>
            <returns>類似画像が見つかったかどうかを返します。</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Matches(System.String,KeyToKey.Plugins.ITemplateMatchingImage,System.Collections.Generic.IEnumerable{KeyToKey.Plugins.MatchResult}@)">
            <summary>
            テンプレート画像に類似する複数の画像を探します。
            </summary>
            <param name="identifier">識別キー</param>
            <param name="sourceImage">探索元の画像</param>
            <param name="results">結果</param>
            <returns>類似画像が見つかったかどうかを返します。</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Matches(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Collections.Generic.IEnumerable{KeyToKey.Plugins.MatchResult}@)">
            <summary>
            テンプレート画像に類似する複数の画像を探します。
            </summary>
            <param name="filePath">テンプレート画像のファイルパス(.png, .jpg, .bmp)</param>
            <param name="x">探索する横の座標</param>
            <param name="y">探索する縦の座標</param>
            <param name="width">探索する横の範囲</param>
            <param name="height">探索する縦の範囲</param>
            <param name="threshold">類似度（0.0～1.0）。どれくらいの数値になれば類似画像としてみなすかどうかを決める値です。1.0に近いほど類似性が高いことを示します。</param>
            <param name="results">探索結果</param>
            <returns>類似画像が見つかったかどうかを返します。</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Matches(System.String,KeyToKey.Plugins.Bounds,System.Double,System.Collections.Generic.IEnumerable{KeyToKey.Plugins.MatchResult}@)">
            <summary>
            テンプレート画像に類似する複数の画像を探します。
            </summary>
            <param name="filePath">テンプレート画像のファイルパス(.png, .jpg, .bmp)</param>
            <param name="bounds">探索範囲</param>
            <param name="threshold">類似度（0.0～1.0）。どれくらいの数値になれば類似画像としてみなすかどうかを決める値です。1.0に近いほど類似性が高いことを示します。</param>
            <param name="results">探索結果</param>
            <returns>類似画像が見つかったかどうかを返します。</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.MakeWindowController(System.IntPtr)">
            <summary>
            ウィンドウの操作や情報取得機能を提供するインスタンスを作成します。
            </summary>
            <param name="windowHandle">ウィンドウハンドル</param>
            <returns>IWindowHandlerのインスタンス</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.FindWindow(System.String)">
            <summary>
            特定のウィンドウから指定した条件のウィンドウを探します。
            </summary>
            <param name="windowTitle">ウィンドウのタイトル</param>
            <returns><seealso cref="T:KeyToKey.Plugins.IWindowController"/>のインスタンス</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.FindWindow(System.String,System.String)">
            <summary>
            特定のウィンドウから指定した条件のウィンドウを探します。
            </summary>
            <param name="windowTitle">ウィンドウのタイトル</param>
            <param name="className">クラス名</param>
            <returns><seealso cref="T:KeyToKey.Plugins.IWindowController"/>のインスタンス</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.FindWindow(System.IntPtr,System.String,System.String)">
            <summary>
            特定のウィンドウから指定した条件のウィンドウを探します。
            </summary>
            <param name="windowHandle">ウィンドウハンドル</param>
            <param name="windowTitle">ウィンドウのタイトル</param>
            <param name="className">クラス名</param>
            <returns><seealso cref="T:KeyToKey.Plugins.IWindowController"/>のインスタンス</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.FindWindow(KeyToKey.Plugins.IWindowController,System.String,System.String)">
            <summary>
            特定のウィンドウから指定した条件のウィンドウを探します。
            </summary>
            <param name="windowController"><seealso cref="T:KeyToKey.Plugins.IWindowController"/>のインスタンス</param>
            <param name="windowTitle">ウィンドウのタイトル</param>
            <param name="className">クラス名</param>
            <returns><seealso cref="T:KeyToKey.Plugins.IWindowController"/>のインスタンス</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.FindWindowTitleStartsWith(System.String)">
            <summary>
            すべてのウィンドウから指定したタイトルの一部から始まるウィンドウを探します。見つからなかった場合はnullを返します。
            </summary>
            <param name="text">タイトルの一部</param>
            <returns><seealso cref="T:KeyToKey.Plugins.IWindowController"/>のインスタンス</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.FindWindowTitleEndsWith(System.String)">
            <summary>
            すべてのウィンドウから指定したタイトルの一部で終わるウィンドウを探します。見つからなかった場合はnullを返します。
            </summary>
            <param name="text">タイトルの一部</param>
            <returns><seealso cref="T:KeyToKey.Plugins.IWindowController"/>のインスタンス</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.FindWindowTitleContains(System.String)">
            <summary>
            すべてのウィンドウから指定したタイトルの一部が含まれるウィンドウを探します。見つからなかった場合はnullを返します。
            </summary>
            <param name="text">タイトルの一部</param>
            <returns><seealso cref="T:KeyToKey.Plugins.IWindowController"/>のインスタンス</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.WindowFromPoint(System.Int32,System.Int32)">
            <summary>
            指定した座標にあるウィンドウのハンドルを取得します。
            </summary>
            <param name="x">横の座標</param>
            <param name="y">縦の座標</param>
            <returns>ウィンドウハンドル</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.WindowFromPoint(System.ValueTuple{System.Int32,System.Int32})">
            <summary>
            指定した座標にあるウィンドウのハンドルを取得します。
            </summary>
            <param name="point">横と縦の座標（タプル形式）</param>
            <returns>ウィンドウハンドル</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Activate(System.String,System.Boolean)">
            <summary>
            指定されたプロセス名のウィンドウをアクティブにします。
            </summary>
            <param name="processName">プロセス名</param>
            <param name="allWindow">true:見つかったすべてのウィンドウをアクティブにしていく</param>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.GetDpiFromPoint(System.Int32,System.Int32)">
            <summary>
            指定した位置にあるモニターのDPIを取得します。
            </summary>
            <param name="x">横の座標</param>
            <param name="y">縦の座標</param>
            <returns>タプル：DpiX, DpiY</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.GetDpiFromPoint(KeyToKey.Plugins.Bounds)">
            <summary>
            指定した位置にあるモニターのDPIを取得します。
            </summary>
            <param name="bounds">横と縦の座標（Width,Heightは使用しません。）</param>
            <returns>タプル：DpiX, DpiY</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.GetDpiFromWindowHandle(System.IntPtr)">
            <summary>
            指定したウィンドウがあるモニターのDPIを取得します。
            </summary>
            <param name="handle"></param>
            <returns>タプル：DpiX, DpiY</returns>
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.ActiveProcessName">
            <summary>
            アクティブになっているウィンドウのプロセス名を取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.ActiveWindowBounds">
            <summary>
            アクティブになっているウィンドウの位置と範囲を取得します。
            </summary>
            <returns>Boundsインスタンス（位置と範囲）</returns>
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.ActiveWindowClientBounds">
            <summary>
            アクティブになっているウィンドウのクライアント領域の位置と範囲を取得します。
            </summary>
            <returns>Boundsインスタンス（位置と範囲）</returns>
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.ActiveWindowHandle">
            <summary>
            アクティブになっているウィンドウのウィンドウハンドルを取得します。
            </summary>
            
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.ActiveWindow">
            <summary>
            アクティブウィンドウのIWindowControllerを取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.WindowUnderCursor">
            <summary>
            カーソル下のウィンドウのIWindowControllerを取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IGlobals.ConsoleWindow">
            <summary>
            コンソールウィンドウのIWindowControllerを取得します。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.ShowTextBoxDialog``1(System.String,System.String,System.Boolean,System.Boolean,``0@)">
            <summary>
            テキストボックスを表示します。
            </summary>
            <typeparam name="T">テキストを解析・変換後の型</typeparam>
            <param name="title">ウィンドウのタイトル</param>
            <param name="initialText">初期テキスト</param>
            <param name="applyRules">KeyToKeyの値ルールを適用するかどうか</param>
            <param name="restoreWindow">ウィンドウが閉じられた後に開始前のウィンドウを表示する</param>
            <param name="result">入力されたテキスト、値ルールを適用している場合はTの型へ変換されます。</param>
            <returns>正常：True、 異常：False</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.ShowImageAsync(System.Drawing.Bitmap,System.String)">
            <summary>
            画像を表示できるウィンドウを表示します。
            </summary>
            <param name="bitmap">表示する画像</param>
            <param name="title">ウィンドウタイトル</param>
            <returns>IWindowController</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.PlaySound(System.String,System.Int32,System.Boolean)">
            <summary>
            音声ファイルを再生します。
            </summary>
            <param name="filePath">音声ファイルのパス</param>
            <param name="volume">ボリューム（0～100）</param>
            <param name="waitPlayEnd">音声ファイルの再生が終了するのを待つ</param>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.PlaySystemSound(KeyToKey.Enums.SystemSounds)">
            <summary>
            システム音声を再生します。
            </summary>
            <param name="sound">システム音声の種類</param>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Angle(System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.Boolean)">
            <summary>
            指定した(x1, x2)から(x2, y2)の角度を計算します。
            </summary>
            <param name="x1">x1</param>
            <param name="y1">y1</param>
            <param name="x2">x2</param>
            <param name="y2">y2</param>
            <param name="isClockwise">true:右回り false:左回り</param>
            <returns>角度</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Angle(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            指定した(x1, x2)から(x2, y2)の角度を計算します。
            </summary>
            <param name="x1">x1</param>
            <param name="y1">y1</param>
            <param name="x2">x2</param>
            <param name="y2">y2</param>
            <param name="isClockwise">true:右回り false:左回り</param>
            <returns>角度</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Angle(System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            指定した(x1, x2)から(x2, y2)の角度を計算します。
            </summary>
            <param name="x1">x1</param>
            <param name="y1">y1</param>
            <param name="x2">x2</param>
            <param name="y2">y2</param>
            <param name="isClockwise">true:右回り false:左回り</param>
            <returns>角度</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Angle(System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            指定した(x1, x2)から(x2, y2)の角度を計算します。
            </summary>
            <param name="x1">x1</param>
            <param name="y1">y1</param>
            <param name="x2">x2</param>
            <param name="y2">y2</param>
            <param name="isClockwise">true:右回り false:左回り</param>
            <returns>角度</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Angle(System.SByte,System.SByte,System.SByte,System.SByte,System.Boolean)">
            <summary>
            指定した(x1, x2)から(x2, y2)の角度を計算します。
            </summary>
            <param name="x1">x1</param>
            <param name="y1">y1</param>
            <param name="x2">x2</param>
            <param name="y2">y2</param>
            <param name="isClockwise">true:右回り false:左回り</param>
            <returns>角度</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Angle(System.Byte,System.Byte,System.Byte,System.Byte,System.Boolean)">
            <summary>
            指定した(x1, x2)から(x2, y2)の角度を計算します。
            </summary>
            <param name="x1">x1</param>
            <param name="y1">y1</param>
            <param name="x2">x2</param>
            <param name="y2">y2</param>
            <param name="isClockwise">true:右回り false:左回り</param>
            <returns>角度</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Angle(System.Int64,System.Int64,System.Int64,System.Int64,System.Boolean)">
            <summary>
            指定した(x1, x2)から(x2, y2)の角度を計算します。
            </summary>
            <param name="x1">x1</param>
            <param name="y1">y1</param>
            <param name="x2">x2</param>
            <param name="y2">y2</param>
            <param name="isClockwise">true:右回り false:左回り</param>
            <returns>角度</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Angle(System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            指定した(x1, x2)から(x2, y2)の角度を計算します。
            </summary>
            <param name="x1">x1</param>
            <param name="y1">y1</param>
            <param name="x2">x2</param>
            <param name="y2">y2</param>
            <param name="isClockwise">true:右回り false:左回り</param>
            <returns>角度</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Angle(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            指定した(x1, x2)から(x2, y2)の角度を計算します。
            </summary>
            <param name="x1">x1</param>
            <param name="y1">y1</param>
            <param name="x2">x2</param>
            <param name="y2">y2</param>
            <param name="isClockwise">true:右回り false:左回り</param>
            <returns>角度</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Angle(System.Int16,System.Int16,System.Int16,System.Int16,System.Boolean)">
            <summary>
            指定した(x1, x2)から(x2, y2)の角度を計算します。
            </summary>
            <param name="x1">x1</param>
            <param name="y1">y1</param>
            <param name="x2">x2</param>
            <param name="y2">y2</param>
            <param name="isClockwise">true:右回り false:左回り</param>
            <returns>角度</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Distance(System.UInt64,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            指定した(x1, x2)から(x2, y2)の距離を計算します。
            </summary>
            <param name="x1">x1</param>
            <param name="y1">y1</param>
            <param name="x2">x2</param>
            <param name="y2">y2</param>
            <returns>距離</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Distance(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            指定した(x1, x2)から(x2, y2)の距離を計算します。
            </summary>
            <param name="x1">x1</param>
            <param name="y1">y1</param>
            <param name="x2">x2</param>
            <param name="y2">y2</param>
            <returns>距離</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Distance(System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            指定した(x1, x2)から(x2, y2)の距離を計算します。
            </summary>
            <param name="x1">x1</param>
            <param name="y1">y1</param>
            <param name="x2">x2</param>
            <param name="y2">y2</param>
            <returns>距離</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Distance(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            指定した(x1, x2)から(x2, y2)の距離を計算します。
            </summary>
            <param name="x1">x1</param>
            <param name="y1">y1</param>
            <param name="x2">x2</param>
            <param name="y2">y2</param>
            <returns>距離</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Distance(System.SByte,System.SByte,System.SByte,System.SByte)">
            <summary>
            指定した(x1, x2)から(x2, y2)の距離を計算します。
            </summary>
            <param name="x1">x1</param>
            <param name="y1">y1</param>
            <param name="x2">x2</param>
            <param name="y2">y2</param>
            <returns>距離</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Distance(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            指定した(x1, x2)から(x2, y2)の距離を計算します。
            </summary>
            <param name="x1">x1</param>
            <param name="y1">y1</param>
            <param name="x2">x2</param>
            <param name="y2">y2</param>
            <returns>距離</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Distance(System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            指定した(x1, x2)から(x2, y2)の距離を計算します。
            </summary>
            <param name="x1">x1</param>
            <param name="y1">y1</param>
            <param name="x2">x2</param>
            <param name="y2">y2</param>
            <returns>距離</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Distance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            指定した(x1, x2)から(x2, y2)の距離を計算します。
            </summary>
            <param name="x1">x1</param>
            <param name="y1">y1</param>
            <param name="x2">x2</param>
            <param name="y2">y2</param>
            <returns>距離</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Distance(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            指定した(x1, x2)から(x2, y2)の距離を計算します。
            </summary>
            <param name="x1">x1</param>
            <param name="y1">y1</param>
            <param name="x2">x2</param>
            <param name="y2">y2</param>
            <returns>距離</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Distance(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            指定した(x1, x2)から(x2, y2)の距離を計算します。
            </summary>
            <param name="x1">x1</param>
            <param name="y1">y1</param>
            <param name="x2">x2</param>
            <param name="y2">y2</param>
            <returns>距離</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Clamp(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            min 以上 max 以下の範囲内で value を返します。
            </summary>
            <param name="min">最小値</param>
            <param name="max">最大値</param>
            <param name="value">値</param>
            <returns>範囲内の値</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Clamp(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            min 以上 max 以下の範囲内で value を返します。
            </summary>
            <param name="min">最小値</param>
            <param name="max">最大値</param>
            <param name="value">値</param>
            <returns>範囲内の値</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Clamp(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            min 以上 max 以下の範囲内で value を返します。
            </summary>
            <param name="min">最小値</param>
            <param name="max">最大値</param>
            <param name="value">値</param>
            <returns>範囲内の値</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            min 以上 max 以下の範囲内で value を返します。
            </summary>
            <param name="min">最小値</param>
            <param name="max">最大値</param>
            <param name="value">値</param>
            <returns>範囲内の値</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Clamp(System.SByte,System.SByte,System.SByte)">
            <summary>
            min 以上 max 以下の範囲内で value を返します。
            </summary>
            <param name="min">最小値</param>
            <param name="max">最大値</param>
            <param name="value">値</param>
            <returns>範囲内の値</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Clamp(System.Byte,System.Byte,System.Byte)">
            <summary>
            min 以上 max 以下の範囲内で value を返します。
            </summary>
            <param name="min">最小値</param>
            <param name="max">最大値</param>
            <param name="value">値</param>
            <returns>範囲内の値</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Clamp(System.Int64,System.Int64,System.Int64)">
            <summary>
            min 以上 max 以下の範囲内で value を返します。
            </summary>
            <param name="min">最小値</param>
            <param name="max">最大値</param>
            <param name="value">値</param>
            <returns>範囲内の値</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            min 以上 max 以下の範囲内で value を返します。
            </summary>
            <param name="min">最小値</param>
            <param name="max">最大値</param>
            <param name="value">値</param>
            <returns>範囲内の値</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            min 以上 max 以下の範囲内で value を返します。
            </summary>
            <param name="min">最小値</param>
            <param name="max">最大値</param>
            <param name="value">値</param>
            <returns>範囲内の値</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Clamp(System.Int16,System.Int16,System.Int16)">
            <summary>
            min 以上 max 以下の範囲内で value を返します。
            </summary>
            <param name="min">最小値</param>
            <param name="max">最大値</param>
            <param name="value">値</param>
            <returns>範囲内の値</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.FindPointOnCircle(System.Double,System.Double,System.Boolean)">
            <summary>
            半径と角度から円上の位置を計算します。
            </summary>
            <param name="radius">半径</param>
            <param name="angle">角度</param>
            <param name="isClockwise">右回りかどうか</param>
            <returns>位置</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.Speech(System.String,System.Int32,System.Int32,KeyToKey.Enums.SpeechLanguage)">
            <summary>
            メッセージを読み上げます。
            </summary>
            <param name="message">読み上げるメッセージ</param>
            <param name="volume">音量（0～100）</param>
            <param name="speed">スピード（-10～10）</param>
            <param name="lang">言語</param>
        </member>
        <member name="M:KeyToKey.Plugins.IGlobals.SpeechAsync(System.String,System.Int32,System.Int32,KeyToKey.Enums.SpeechLanguage)">
            <summary>
            非同期でメッセージを読み上げます。
            </summary>
            <param name="message">読み上げるメッセージ</param>
            <param name="volume">音量（0～100）</param>
            <param name="speed">スピード（-10～10）</param>
            <param name="lang">言語</param>
        </member>
        <member name="T:KeyToKey.Plugins.IIME">
            <summary>
            IME
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IIME.IsEnabled">
            <summary>
            IMEが有効状態かどうかを取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IIME.IsHan">
            <summary>
            IMEが半角になっているかどうかを取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IIME.ConversionMode">
            <summary>
            IMEの変換モードを設定／取得します。設定に関しては、Microsoft IME 以外では正常に動かないかもしれません。Google日本語入力では「半角英数」と「ひらがな」のみ動作を確認しました。
            </summary>
        </member>
        <member name="T:KeyToKey.Plugins.IInput">
            <summary>
            Input
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IInput.SetEventLock(KeyToKey.Enums.Keys,System.Boolean)">
            <summary>
            キーイベントのロックを設定します。
            </summary>
            <param name="key">キー</param>
            <param name="isLock">true:ロック false:アンロック</param>
        </member>
        <member name="M:KeyToKey.Plugins.IInput.Replay(System.String)">
            <summary>
            記録された入力を再生します。
            </summary>
            <param name="path">記録ファイルのパス(*.kilog)</param>
        </member>
        <member name="M:KeyToKey.Plugins.IInput.GetInputState(KeyToKey.Enums.Keys)">
            <summary>
            キーの入力状態を取得します。
            </summary>
            <param name="key">取得したいキー</param>
            <returns>true: Down, false: Up</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IInput.GetControllerButtonState(KeyToKey.Enums.ControllerButtons)">
            <summary>
            コントローラーのボタンの入力状態を取得します。
            </summary>
            <param name="button">取得したいボタン</param>
            <returns>true:Down, false:Up</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IInput.GetTriggerState">
            <summary>
            割り当てのトリガーが押されているかどうかを取得します。
            </summary>
            <returns>true:Down, false:Up</returns>
        </member>
        <member name="P:KeyToKey.Plugins.IInput.InputHistory">
            <summary>
            キーの入力履歴を取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IInput.CursorPosition">
            <summary>
            マウスカーソルの位置を取得します。
            </summary>
        </member>
        <member name="T:KeyToKey.Plugins.IKeyProvider">
            <summary>
            キー
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IKeyProvider.Item(KeyToKey.Enums.Keys)">
            <summary>
            指定したキーのプロパティを探します。
            </summary>
            <param name="key">キー</param>
            <returns>見つかったIKey型のプロパティを返します。見つからなかった場合はnullを返します。</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IKeyProvider.Find(KeyToKey.Enums.Keys)">
            <summary>
            指定したキーのプロパティを探します。
            </summary>
            <param name="key">キー</param>
            <returns>見つかったIKey型のプロパティを返します。見つからなかった場合はnullを返します。</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IKeyProvider.UpAll(KeyToKey.Enums.Keys[])">
            <summary>
            キーをすべて離します。
            </summary>
            <param name="excludeKeys">除外するキー</param>
        </member>
        <member name="P:KeyToKey.Plugins.IKeyProvider.OemColon">
            <summary>コロンキー</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IKeyProvider.OemSlash">
            <summary>スラッシュキー</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IKeyProvider.OemAt">
            <summary>@キー</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IKeyProvider.OemOpeningBracket">
            <summary>[キー</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IKeyProvider.OemBackSlash">
            <summary>バックシュラッシュ(￥)キー</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IKeyProvider.OemClosingBracket">
            <summary>]キー</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IKeyProvider.OemCaret">
            <summary>キャレットキー</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IKeyProvider.Oem102">
            <summary>バックシュラッシュ(￥)キー</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IKeyProvider.LButton">
            <summary>MouseLeftButton</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IKeyProvider.RButton">
            <summary>MouseRightButton</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IKeyProvider.MButton">
            <summary>MouseMiddleButton</summary>
        </member>
        <member name="T:KeyToKey.Plugins.IKey">
            <summary>
            キー
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IKey.Key">
            <summary>
            キーの値
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IKey.IsPressed">
            <summary>
            押されているかどうか
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IKey.IsBlocked">
            <summary>
            ブロックされているかどうかを取得します。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IKey.Down(System.Int32)">
            <summary>
            キーを押します。
            </summary>
            <param name="waitTime">押した後の待機時間（ミリ秒）</param>
        </member>
        <member name="M:KeyToKey.Plugins.IKey.Up(System.Int32)">
            <summary>
            キーを離します。
            </summary>
            <param name="waitTime">離した後の待機時間（ミリ秒）</param>
        </member>
        <member name="M:KeyToKey.Plugins.IKey.Tap(System.Int32,System.Int32)">
            <summary>
            押して離します。
            </summary>
            <param name="waitTimeAfterDown">押した後の待機時間（ミリ秒）</param>
            <param name="waitTimeAfterUp">離した後の待機時間（ミリ秒）</param>
        </member>
        <member name="M:KeyToKey.Plugins.IKey.Block">
            <summary>
            キーの入力をブロックします（入力の監視方法がフックの場合にのみ機能します）
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IKey.Unblock">
            <summary>
            キーの入力ブロックを解除します。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IKey.WaitForInput(System.Boolean)">
            <summary>
            キーの入力を待ちます。
            <param name="cancelWhenDowned">待機を解除するタイミング（true: 押されたとき, false:離されたとき）</param>
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IKey.GetAsyncKeyState">
            <summary>
            WindowsAPIのGeyAsyncKeyState関数を使用してキーの状態を取得します
            </summary>
            <returns>true:押されている, false:離されている</returns>
        </member>
        <member name="T:KeyToKey.Plugins.IKeyboard">
            <summary>
            キーボードアクションに関する機能を提供します。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IKeyboard.Down(KeyToKey.Enums.Keys,System.Int32,System.Boolean)">
            <summary>
            キーを押します。
            </summary>
            <param name="key">キー</param>
            <param name="interval">押した後の待機時間</param>
            <param name="eventCancel">キーの入力イベントをキャンセルするか</param>
        </member>
        <member name="M:KeyToKey.Plugins.IKeyboard.Up(KeyToKey.Enums.Keys,System.Int32,System.Boolean)">
            <summary>
            キーを離します。
            </summary>
            <param name="key">キー</param>
            <param name="interval">離した後の待機時間</param>
            <param name="eventCancel">キーの入力イベントをキャンセルするか</param>
        </member>
        <member name="M:KeyToKey.Plugins.IKeyboard.Tap(KeyToKey.Enums.Keys,System.Int32,System.Int32,System.Boolean)">
            <summary>
            キーを押して離します。
            </summary>
            <param name="key">キー</param>
            <param name="interval1">押した後の待機時間</param>
            <param name="interval2">離した後の待機時間</param>
            <param name="eventCancel">キーの入力イベントをキャンセルするか</param>
        </member>
        <member name="M:KeyToKey.Plugins.IKeyboard.InputText(System.String,System.Int32)">
            <summary>
            文字列を入力します。
            </summary>
            <param name="text">入力する文字</param>
            <param name="interval">1文字入力するごとに待機する時間</param>
        </member>
        <member name="M:KeyToKey.Plugins.IKeyboard.GetState(KeyToKey.Enums.Keys)">
            <summary>
            キーが押されているかどうかを取得します。
            </summary>
            <param name="key">キー</param>
            <returns>キーが押されているかどうか</returns>
        </member>
        <member name="T:KeyToKey.Plugins.IMacro">
            <summary>
            
            </summary>
        </member>
        <member name="T:KeyToKey.Plugins.IModifier">
            <summary>>割り当ての同時押しに関する情報を提供します。</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IModifier.IsPressed">
            <summary>修飾キー／ボタンが押されているかどうかを取得します。</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IModifier.Inputs">
            <summary>
            Keys or ControllerButtons
            </summary>
        </member>
        <member name="T:KeyToKey.Plugins.IMouse">
            <summary>
            マウスアクションに関する機能を提供します。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IMouse.SetOriginPoint(System.Int32,System.Int32)">
            <summary>マウスアクションの原点座標を設定します。</summary>
            <param name="x">横の座標</param>
            <param name="y">縦の座標</param>
        </member>
        <member name="M:KeyToKey.Plugins.IMouse.Down(KeyToKey.Enums.MouseButton,System.Int32,System.Boolean)">
            <summary>マウスのボタンを押します。</summary>
            <param name="button">マウスのボタン</param>
            <param name="interval">ボタンを押した後の待機時間</param>
            <param name="eventCancel">入力イベントキャンセルを行うか</param>
        </member>
        <member name="M:KeyToKey.Plugins.IMouse.Up(KeyToKey.Enums.MouseButton,System.Int32,System.Boolean)">
            <summary>マウスのボタンを離します。</summary>
            <param name="button">マウスのボタン</param>
            <param name="interval">ボタンを離した後の待機時間</param>
            <param name="eventCancel">入力イベントキャンセルを行うか</param>
        </member>
        <member name="M:KeyToKey.Plugins.IMouse.Click(KeyToKey.Enums.MouseButton,System.Int32,System.Int32,System.Boolean)">
            <summary>マウスのボタンを押して離します。</summary>
            <param name="button">マウスのボタン</param>
            <param name="interval1">ボタンを押した後の待機時間</param>
            <param name="interval2">ボタンを離した後の待機時間</param>
            <param name="eventCancel">入力イベントキャンセルを行うか</param>
        </member>
        <member name="M:KeyToKey.Plugins.IMouse.Move(System.Int32,System.Int32,System.Int32)">
            <summary>マウスカーソルを指定した位置へ移動させます。</summary>
            <param name="x">横の座標</param>
            <param name="y">縦の座標</param>
            <param name="interval">移動後の待機時間</param>
        </member>
        <member name="M:KeyToKey.Plugins.IMouse.MoveWithSteps(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>マウスカーソルを指定した位置へ移動させます。</summary>
            <param name="destX">横の座標</param>
            <param name="destY">縦の座標</param>
            <param name="maxSteps">ステップ数</param>
            <param name="wait">ステップ毎に待機する時間</param>
            <param name="smooth">スムーズ移動</param>
            <param name="useApi">【推奨】マウスカーソルがある場合:false, ない場合: true</param>
        </member>
        <member name="M:KeyToKey.Plugins.IMouse.Offset(System.Int32,System.Int32,System.Int32)">
            <summary>マウスカーソルを指定した分だけ移動させます。</summary>
            <param name="x">横の座標</param>
            <param name="y">縦の座標</param>
            <param name="interval">移動後の待機時間</param>
        </member>
        <member name="M:KeyToKey.Plugins.IMouse.OffsetBySteps(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>マウスカーソルを指定した分だけ移動させます。</summary>
            <param name="destX">横の座標</param>
            <param name="destY">縦の座標</param>
            <param name="maxSteps">ステップ数</param>
            <param name="wait">ステップ毎に待機する時間</param>
            <param name="smooth">スムーズ移動</param>
            <param name="useApi">【推奨】マウスカーソルがある場合:false, ない場合: true</param>
        </member>
        <member name="M:KeyToKey.Plugins.IMouse.WheelUp(System.Int32)">
            <summary>ホイール上</summary>
            <param name="delta">移動量</param>
        </member>
        <member name="M:KeyToKey.Plugins.IMouse.WheelDown(System.Int32)">
            <summary>ホイール下</summary>
            <param name="delta">移動量</param>
        </member>
        <member name="M:KeyToKey.Plugins.IMouse.WheelLeft(System.Int32)">
            <summary>ホイール左</summary>
            <param name="delta">移動量</param>
        </member>
        <member name="M:KeyToKey.Plugins.IMouse.WheelRight(System.Int32)">
            <summary>ホイール右</summary>
            <param name="delta">移動量</param>
        </member>
        <member name="P:KeyToKey.Plugins.IMouse.Position">
            <summary>マウスカーソルの位置</summary>
        </member>
        <member name="M:KeyToKey.Plugins.IMouse.GetState(KeyToKey.Enums.Keys)">
            <summary>
            キーが押されているかどうかを取得します。
            </summary>
            <param name="key">キー</param>
            <returns>キーが押されているかどうか</returns>
        </member>
        <member name="T:KeyToKey.Plugins.IPathSelector">
            <summary>
            IPathSelector
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IPathSelector.SelectFile">
            <summary>
            ファイルのパスを選択しKeyToKeyで使用できるパスに変換します。
            </summary>
            <returns>ファイルパス</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IPathSelector.SelectFile(System.String,System.String[])">
            <summary>
            ファイルのパスを選択しKeyToKeyで使用できるパスに変換します。
            </summary>
            <param name="displayText">表示するテキスト</param>
            <param name="extensions">フィルターを行う「.」なしの拡張子</param>
            <returns>ファイルパス</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IPathSelector.SelectFolder">
            <summary>
            フォルダのパスを選択しKeyToKeyで使用できるパスに変換します。
            </summary>
            <returns>フォルダのパス</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IPathSelector.SelectNewFile">
            <summary>
            新しいファイルのパスを選択しKeyToKeyで使用できるパスに変換します。
            </summary>
            <returns>新しいファイルのパス</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IPathSelector.SelectNewFile(System.String,System.String[])">
            <summary>
            新しいファイルのパスを選択しKeyToKeyで使用できるパスに変換します。
            </summary>
            <param name="displayText">表示するテキスト</param>
            <param name="extensions">フィルターを行う「.」なしの拡張子</param>
            <returns>新しいファイルのパス</returns>
        </member>
        <member name="E:KeyToKey.Plugins.IProfile.IsEnabledChanged">
            <summary>
            IsEnabledの値が変わった時に発生します。
            </summary>
        </member>
        <member name="E:KeyToKey.Plugins.IProfile.CanWorkOnActiveWindowChanged">
            <summary>
            CanWorkOnActiveWindowの値が変わった時に発生します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IProfile.IsEnabled">
            <summary>
            プロファイルが有効かどうかを取得、設定します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IProfile.CanWorkOnActiveWindow">
            <summary>
            プロファイルがアクティブウィンドウ上で実行可能かどうかを取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IProfile.AutoSwitcher">
            <summary>
            プロファイルの自動切り替え
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IProfile.Name">
            <summary>
            プロファイルの名前
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IProfile.ChangeTo(System.String)">
            <summary>
            プロファイルを変更します。
            </summary>
            <param name="profileName">プロファイルの名前</param>
        </member>
        <member name="P:KeyToKey.Plugins.IAutomaticProfileSwitcher.IsEnabled">
            <summary>
            自動切り替えが有効かどうかを取得、設定します。この設定はKeyToKey全体で共有されます。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IQuickLauncher.Show(System.String)">
            <summary>
            クイックランチャーを表示します。
            </summary>
            <param name="searchWord">検索ワード</param>
        </member>
        <member name="T:KeyToKey.Plugins.IScriptConfig">
            <summary>
            スクリプトの設定
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IScriptConfig.ShouldSuspendDisposing">
            <summary>
            スクリプトの正常処理が終了した、もしくは処理が中断された場合にスクリプト用リソソースを解放する処理を
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IScriptConfig.AbortWhenDisabled">
            <summary>
            KeyToKeyが無効状態になったときに強制終了を行うかどうかを設定します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IScriptConfig.AbortWhenUnavailableProcess">
            <summary>
            実行できないプロセス、ウィンドウがアクティブになったときに強制終了を行うかどうかを設定します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.DisposingEventArgs.Reason">
            <summary>
            解放処理の理由
            </summary>
        </member>
        <member name="T:KeyToKey.Plugins.ISound">
            <summary>
            Sound
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.ISound.Play(System.String,System.Int32,System.Boolean)">
            <summary>
            音声ファイルを再生します。
            </summary>
            <param name="filePath">音声ファイルのパス</param>
            <param name="volume">ボリューム（0～100）</param>
            <param name="waitPlayEnd">音声ファイルの再生が終了するのを待つ</param>
        </member>
        <member name="M:KeyToKey.Plugins.ISound.PlaySystem(KeyToKey.Enums.SystemSounds)">
            <summary>
            システム音声を再生します。
            </summary>
            <param name="sound">システム音声の種類</param>
        </member>
        <member name="T:KeyToKey.Plugins.ITemplateMatching">
            <summary>
            テンプレートマッチング
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.ITemplateMatching.Configs">
            <summary>
            画像認識の設定を保持するプロパティ。インデクサーを使用して設定を取得することが出来ます。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.ITemplateMatching.SetBounds(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            テンプレートマッチングを行う位置、範囲を設定します。
            </summary>
            <param name="identifier">識別キー</param>
            <param name="x">横の座標</param>
            <param name="y">縦の座標</param>
            <param name="width">横の長さ</param>
            <param name="height">縦の長さ</param>
        </member>
        <member name="M:KeyToKey.Plugins.ITemplateMatching.SetBounds(System.String,KeyToKey.Plugins.Bounds)">
            <summary>
            テンプレートマッチングを行う位置、範囲を設定します。
            </summary>
            <param name="identifier">識別キー</param>
            <param name="bounds">位置と範囲</param>
        </member>
        <member name="T:KeyToKey.Plugins.ITemplateMatchingImage">
            <summary>
            画像認識に使用する画像データ
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.ITemplateMatchingImage.Source">
            <summary>
            Bitmap
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.ITemplateMatchingImage.PixelFormat">
            <summary>
            ピクセルの形式
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.TriggerStateChangedEventArgs.NewState">
            <summary>
            新しい状態
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.TriggerStateChangedEventArgs.IsCancel">
            <summary>
            トリガーの入力をキャンセルするかどうか（キーボード／マウスのみ）
            </summary>
        </member>
        <member name="T:KeyToKey.Plugins.ITrigger">
            <summary>割り当てのトリガーに関する情報を提供します。</summary>
        </member>
        <member name="P:KeyToKey.Plugins.ITrigger.IsPressed">
            <summary>トリガーが押されているかどうかを取得します。</summary>
        </member>
        <member name="P:KeyToKey.Plugins.ITrigger.Value">
            <summary>
            トリガーの値
            </summary>
        </member>
        <member name="E:KeyToKey.Plugins.ITrigger.StateChanged">
            <summary>
            トリガーの状態が変化したら発生します。
            </summary>
        </member>
        <member name="T:KeyToKey.Plugins.Trigger">
            <summary></summary>
        </member>
        <member name="T:KeyToKey.Plugins.Trigger.IKeyboard">
            <summary></summary>
        </member>
        <member name="P:KeyToKey.Plugins.Trigger.IKeyboard.Trigger">
            <summary>キーボード、マウスのトリガー（Keys型）を取得します。</summary>
        </member>
        <member name="T:KeyToKey.Plugins.Trigger.IController">
            <summary></summary>
        </member>
        <member name="P:KeyToKey.Plugins.Trigger.IController.Trigger">
            <summary>コントローラーのトリガー（ControllerButtons型）を取得します。</summary>
        </member>
        <member name="T:KeyToKey.Plugins.IVariable">
            <summary></summary>
        </member>
        <member name="M:KeyToKey.Plugins.IVariable.Get(System.String)">
            <summary>
            KeyToKey側の変数を取得します。
            </summary>
            <param name="name">変数名</param>
            <returns>変数の値</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IVariable.Get``1(System.String)">
            <summary>
            KeyToKey側の変数を指定した型にキャストして取得します。
            </summary>
            <typeparam name="T">キャストする型</typeparam>
            <param name="name">変数名</param>
            <returns>変数の値</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IVariable.Set(System.String,System.Object)">
            <summary>
            KeyToKey側の変数に値を代入します。
            変数が存在しない場合は変数を作成します。
            </summary>
            <param name="name">変数名</param>
            <param name="value">値</param>
        </member>
        <member name="M:KeyToKey.Plugins.IVariable.SetLocal(System.String,System.Object)">
            <summary>
            KeyToKey側のローカル変数に値を代入します。
            変数が存在しない場合は変数を作成します。
            </summary>
            <param name="name">変数名</param>
            <param name="value">値</param>
        </member>
        <member name="M:KeyToKey.Plugins.IVariable.SetGlobal(System.String,System.Object)">
            <summary>
            KeyToKey側のグローバル変数に値を代入します。
            変数が存在しない場合は変数を作成します。
            </summary>
            <param name="name">変数名</param>
            <param name="value">値</param>
        </member>
        <member name="M:KeyToKey.Plugins.IVariable.SetList(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            リストをセットします。
            </summary>
            <param name="name"></param>
            <param name="values"></param>
        </member>
        <member name="M:KeyToKey.Plugins.IVariable.GetList(System.String)">
            <summary>
            リストを取得します。
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:KeyToKey.Plugins.IVariable.Exists(System.String)">
            <summary>
            変数やリストが存在するかどうかを取得します。
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:KeyToKey.Plugins.IVariable.Parameters">
            <summary>
            引数を取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVariable.LocalVariables">
            <summary>
            ローカル変数を取得します。※引数も含まれています。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVariable.GlobalVariables">
            <summary>
            グローバル変数を取得します。
            </summary>
        </member>
        <member name="T:KeyToKey.Plugins.IVariableDictionary">
            <summary>
            KeyToKey側変数の操作を行います。
            </summary>
        </member>
        <member name="E:KeyToKey.Plugins.IVariableDictionary.Updated">
            <summary>
            変数の値が更新されたら発生します。
            </summary>
        </member>
        <member name="E:KeyToKey.Plugins.IVariableDictionary.Deleted">
            <summary>
            変数が削除されたら発生します。
            </summary>
        </member>
        <member name="E:KeyToKey.Plugins.IVariableDictionary.Created">
            <summary>
            変数が作成されたら発生します。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IVariableDictionary.GetValueOrCreateNew``1(System.String,``0)">
            <summary>
            変数の値を取得します。もし変数が存在しない場合は新しく作成します。
            </summary>
            <param name="variableName">変数名</param>
            <param name="defaultValue">変数が存在しなかった場合の初期値（double型, string型, bool型, Keys型, MouseButton型）</param>
            <returns>変数が存在する場合は変数の値を、存在しなかった場合は初期値を取得します。</returns>
        </member>
        <member name="T:KeyToKey.Plugins.VariableEventArgs">
            <summary>
            変数のイベント引数
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.VariableEventArgs.Name">
            <summary>
            変数の名前
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.VariableEventArgs.Value">
            <summary>
            変数の値
            </summary>
        </member>
        <member name="T:KeyToKey.Plugins.IVirtualDualShock4">
            <summary>
            仮想DualShock4コントローラー
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualDualShock4.HasConnected">
            <summary>
            仮想DualShock4コントローラーに接続したかどうかを取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualDualShock4.Cross">
            <summary>✕ボタン（Aボタン）</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualDualShock4.Circle">
            <summary>○ボタン（Bボタン）</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualDualShock4.Square">
            <summary>□ボタン（Xボタン）</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualDualShock4.Triangle">
            <summary>△ボタン（Yボタン）</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualDualShock4.L1">
            <summary>L1ボタン（LBボタン）</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualDualShock4.R1">
            <summary>R1ボタン（RBボタン）</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualDualShock4.L3">
            <summary>左スティック押し込み</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualDualShock4.R3">
            <summary>右スティック押し込み</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualDualShock4.Share">
            <summary>Shareボタン（Back/Selectボタン）</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualDualShock4.Options">
            <summary>Optionsボタン（Startボタン）</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualDualShock4.PSButton">
            <summary>PlayStationボタン（ExButton2）</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualDualShock4.Touchpad">
            <summary>タッチパッド（ExButton1）</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualDualShock4.DPadUp">
            <summary>十字キー上</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualDualShock4.DPadUpRight">
            <summary>十字キー右上</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualDualShock4.DPadRight">
            <summary>十字キー右</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualDualShock4.DPadDownRight">
            <summary>十字キー右下</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualDualShock4.DPadDown">
            <summary>十字キー下</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualDualShock4.DPadDownLeft">
            <summary>十字キー左下</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualDualShock4.DPadLeft">
            <summary>十字キー左</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualDualShock4.DPadUpLeft">
            <summary>十字キー左上</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualDualShock4.L2">
            <summary>L2(LT)</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualDualShock4.R2">
            <summary>R2(RT)</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualDualShock4.LeftStick">
            <summary>左スティック</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualDualShock4.RightStick">
            <summary>右スティックスティック</summary>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualDualShock4.SetDPad(KeyToKey.Plugins.DPadDirections)">
            <summary>
            十字キーを方向で設定する
            </summary>
            <param name="direction">方向</param>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualDualShock4.NeutralizeDPad">
            <summary>
            十字キーをニュートラルにする
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualDualShock4.Reset">
            <summary>
            各入力の状態をリセットします。
            </summary>
        </member>
        <member name="T:KeyToKey.Plugins.IVirtualDualShockMapping">
            <summary>
            マッピング
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualDualShockMapping.Mapping">
            <summary>
            マッピングの制御や状態を取得します。
            </summary>
        </member>
        <member name="T:KeyToKey.Plugins.IVirtualDualShock4Button">
            <summary>
            DualShock4のボタン
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualDualShock4Button.Down(System.Int32)">
            <summary>
            押す
            </summary>
            <param name="wait">押された後の待機時間（ミリ秒）</param>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualDualShock4Button.Up(System.Int32)">
            <summary>
            離す
            </summary>
            <param name="wait">離された後の待機時間（ミリ秒）</param>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualDualShock4Button.Tap(System.Int32,System.Int32)">
            <summary>
            押して離す
            </summary>
            <param name="waitAfterDown">押された後の待機時間（ミリ秒）</param>
            <param name="waitAfterUp">離された後の待機時間</param>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualDualShock4Button.SetState(System.Boolean)">
            <summary>
            押す／離すをboolで設定する
            </summary>
            <param name="newState">true: 押す, false: 離す</param>
        </member>
        <member name="T:KeyToKey.Plugins.IVirtualDualShock4Trigger">
            <summary>
            DualShock4のトリガー
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualDualShock4Trigger.SetValue(System.Double)">
            <summary>
            0.0～1.0の間で値を設定します
            </summary>
            <param name="value">0.0～1.0</param>
        </member>
        <member name="T:KeyToKey.Plugins.IVirtualDualShock4Stick">
            <summary>
            DualShock4のスティック
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualDualShock4Stick.Clockwise">
            <summary>
            <see cref="M:KeyToKey.Plugins.IVirtualDualShock4Stick.SetValueByAngle(System.Double,System.Double)"/>における角度の方向を設定します。true: 時計回り, false: 反時計回り。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualDualShock4Stick.SetValue(System.Double,System.Double)">
            <summary>
            スティックの値を設定します。
            </summary>
            <param name="horizontal">[左]-1.0 ～ [無]0.0 ～ [右]1.0</param>
            <param name="vertical">[上]-1.0 ～ [無]0.0 ～ [下]1.0</param>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualDualShock4Stick.SetValue(System.ValueTuple{System.Double,System.Double})">
            <summary>
            スティックの値を設定します。
            </summary>
            <param name="value">horizontal: [左]-1.0 ～ [無]0.0 ～ [右]1.0　／ vertical: [上]-1.0 ～ [無]0.0 ～ [下]1.0</param>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualDualShock4Stick.SetValueByAngle(System.Double,System.Double)">
            <summary>
            半径と角度からスティックの値を設定します。
            </summary>
            <param name="radius">半径（0.0 ～ 1.0）</param>
            <param name="angle">角度（0 ～）</param>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualDualShock4Stick.Neutralize">
            <summary>
            スティックをニュートラルにします。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualDualShock4Stick.Up(System.Double)">
            <summary>
            スティックを上に傾けます。
            </summary>
            <param name="radius">半径（0.0 ～ 1.0）</param>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualDualShock4Stick.UpRight(System.Double)">
            <summary>
            スティックを上に傾けます。
            </summary>
            <param name="radius">半径（0.0 ～ 1.0）</param>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualDualShock4Stick.Right(System.Double)">
            <summary>
            スティックを右上に傾けます。
            </summary>
            <param name="radius">半径（0.0 ～ 1.0）</param>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualDualShock4Stick.DownRight(System.Double)">
            <summary>
            スティックを右に傾けます。
            </summary>
            <param name="radius">半径（0.0 ～ 1.0）</param>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualDualShock4Stick.Down(System.Double)">
            <summary>
            スティックを下に傾けます。
            </summary>
            <param name="radius">半径（0.0 ～ 1.0）</param>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualDualShock4Stick.DownLeft(System.Double)">
            <summary>
            スティックを左下に傾けます。
            </summary>
            <param name="radius">半径（0.0 ～ 1.0）</param>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualDualShock4Stick.Left(System.Double)">
            <summary>
            スティックを左に傾けます。
            </summary>
            <param name="radius">半径（0.0 ～ 1.0）</param>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualDualShock4Stick.UpLeft(System.Double)">
            <summary>
            スティックを左上に傾けます。
            </summary>
            <param name="radius">半径（0.0 ～ 1.0）</param>
        </member>
        <member name="T:KeyToKey.Plugins.IMouseVirtualPositionState">
            <summary>
            仮想の位置に関する状態
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IMouseVirtualPositionState.LastDelta">
            <summary>最後に発生したマウス移動の量</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IMouseVirtualPositionState.Position">
            <summary>現在の仮想位置</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IMouseVirtualPositionState.NormalizedDistance">
            <summary>中心からの距離(-1.0 ～ 0.0 ～ 1.0) = (Position / Radius)</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IMouseVirtualPositionState.Distance">
            <summary>
            中心からの距離（-1.0 ～ 0.0 ～ 1.0）
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IMouseVirtualPositionState.GetAngle(System.Boolean)">
            <summary>
            仮想位置の角度を取得します。
            </summary>
            <param name="isClockwise">true:時計回り false:反時計回り</param>
            <returns>角度</returns>
        </member>
        <member name="T:KeyToKey.Plugins.IMouseVirtualPositionService">
            <summary>
            
            </summary>
        </member>
        <member name="E:KeyToKey.Plugins.IMouseVirtualPositionService.Moving">
            <summary>
            マウスの移動が行われたら発生します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IMouseVirtualPositionService.State">
            <summary>
            仮想の位置に関する状態を取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IMouseVirtualPositionService.VirtualRadius">
            <summary>移動可能な仮想半径</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IMouseVirtualPositionService.IsEnabled">
            <summary>マウス移動の監視が実行中かどうかを取得します。</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IMouseVirtualPositionService.AllowsInjectedMove">
            <summary>アプリによるマウス移動を許可します。</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IMouseVirtualPositionService.IsCancel">
            <summary>マウスの移動をキャンセルするかどうか</summary>
        </member>
        <member name="M:KeyToKey.Plugins.IMouseVirtualPositionService.Start(KeyToKey.Enums.VirtualPositionDetectionMethod,System.Double,System.Boolean)">
            <summary>
            マウス移動の監視を実行します。
            </summary>
            <param name="method">マウスの監視方法</param>
            <param name="virtualRadius">仮想の半径</param>
            <param name="allowsInjectedMove">アプリによるマウス移動を許可する</param>
        </member>
        <member name="M:KeyToKey.Plugins.IMouseVirtualPositionService.Stop">
            <summary>
            マウス移動の監視を停止させます。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IMouseVirtualPositionService.ResetInternalFields">
            <summary>
            内部数値をリセットします。
            </summary>
        </member>
        <member name="T:KeyToKey.Plugins.IMouseAsStick">
            <summary>
            マウスを仮想コントローラーのスティックとして扱います。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IMouseAsStick.IsEnabled">
            <summary>
            true:開始 false:停止
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IMouseAsStick.ResetPosition">
            <summary>
            位置をリセットします。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IMouseAsStick.MouseVirtualPositionService">
            <summary>
            このインスタンスで使用されているIMouseVirtualPositionServiceのインスタンス
            </summary>
        </member>
        <member name="T:KeyToKey.Plugins.IVirtualXInput">
            <summary>
            仮想XInput
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualXInput.GetController(System.Int32)">
            <summary>
            仮想XInputコントローラーを操作するためのインスタンスを取得します。
            </summary>
            <param name="userIndex">デバイス番号（0～3）</param>
            <returns>インスタンス</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualXInput.GetMappingState(System.Int32,KeyToKey.Enums.MappingSources)">
            <summary>
            仮想XInputへのマッピング状態を取得します。
            </summary>
            <param name="userIndex">仮想XInputのデバイス番号</param>
            <param name="source">マッピング元のボタンやスティック</param>
            <returns></returns>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualXInput.SetMappingState(System.Int32,System.Collections.Generic.IEnumerable{KeyToKey.Enums.MappingSources},System.Boolean)">
            <summary>
            仮想XInputへのマッピング状態をセットします。
            </summary>
            <param name="userIndex">仮想XInputのデバイス番号</param>
            <param name="sources">マッピング元のボタンやスティック</param>
            <param name="state">True:マッピングを行う、False:マッピングを停止する</param>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualXInput.SetStickValue(System.Int32,KeyToKey.Enums.XInputSticks,System.Int16)">
            <summary>
            スティックの値を設定します。
            </summary>
            <param name="userIndex">仮想XInputのデバイス番号</param>
            <param name="stick">スティック</param>
            <param name="value">スティックの値 0がニュートラル、-32768～32767</param>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualXInput.SetStickValue(System.Int32,System.Boolean,System.Int32,System.Boolean,System.Int16)">
            <summary>
            角度と半径からスティックの値を設定します。
            </summary>
            <param name="userIndex">仮想XInputのデバイス番号</param>
            <param name="isLeftStick">左スティックかどうか</param>
            <param name="angle">角度</param>
            <param name="isClockwise">角度が右回りかどうか</param>
            <param name="radius">半径（最大最大32767）</param>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualXInput.SetTriggerValue(System.Int32,KeyToKey.Enums.XInputTriggers,System.Byte)">
            <summary>
            トリガーの値を設定します。
            </summary>
            <param name="userIndex">仮想XInputのデバイス番号</param>
            <param name="trigger">トリガー</param>
            <param name="value">0～255</param>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualXInput.ResetAll(System.Int32)">
            <summary>
            すべての値をリセットします。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualXInput.ResetStick(System.Int32,System.Boolean)">
            <summary>
            スティックの値をリセットします。
            </summary>
            <param name="userIndex">仮想XInputのデバイス番号</param>
            <param name="isLeftStick">左スティックかどうか</param>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualXInput.Down(System.Int32,KeyToKey.Enums.XInputButtons,System.Int32)">
            <summary>
            ボタンを押します。
            </summary>
            <param name="userIndex">仮想XInputのデバイス番号</param>
            <param name="button">ボタン</param>
            <param name="wait">押したあとの待機時間</param>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualXInput.Up(System.Int32,KeyToKey.Enums.XInputButtons,System.Int32)">
            <summary>
            ボタンを押します。
            </summary>
            <param name="userIndex">仮想XInputのデバイス番号</param>
            <param name="button">ボタン</param>
            <param name="wait">離したあとの待機時間</param>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualXInput.Tap(System.Int32,KeyToKey.Enums.XInputButtons,System.Int32,System.Int32)">
            <summary>
            ボタンを押して離します。
            </summary>
            <param name="userIndex">仮想XInputのデバイス番号</param>
            <param name="button">ボタン</param>
            <param name="wait1">押したあとの待機時間</param>
            <param name="wait2">離したあとの待機時間</param>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualXInputUser.UserIndex">
            <summary>
            デバイス番号
            </summary>
        </member>
        <member name="T:KeyToKey.Plugins.IMapping">
            <summary>
            仮想コントローラーのマッピングの状態を取得、または設定を行います。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IMapping.Suspend">
            <summary>
            マッピングを停止させます。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IMapping.Resume">
            <summary>
            マッピングを再開させます。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IMapping.ResumeForcefully">
            <summary>
            マッピングを強制的に再開させます。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IMapping.IsEnabled">
            <summary>
            マッピングが有効かどうかを取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IMapping.IsSuspendedByMyself">
            <summary>
            マッピングが自身によって停止させらているかどうかを取得します。
            </summary>
        </member>
        <member name="T:KeyToKey.Plugins.IVirtualXInputDevice">
            <summary>
            仮想XInputコントローラー
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualXInputDevice.LeftStick">
            <summary>左スティック</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualXInputDevice.RightStick">
            <summary>右スティック</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualXInputDevice.LeftTrigger">
            <summary>左トリガー</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualXInputDevice.RightTrigger">
            <summary>右トリガー</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualXInputDevice.A">
            <summary>Aボタン</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualXInputDevice.B">
            <summary>Bボタン</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualXInputDevice.X">
            <summary>Xボタン</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualXInputDevice.Y">
            <summary>Yボタン</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualXInputDevice.Back">
            <summary>Backボタン</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualXInputDevice.Start">
            <summary>Startボタン</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualXInputDevice.RB">
            <summary>RBボタン</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualXInputDevice.LB">
            <summary>LBボタン</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualXInputDevice.LeftStickPush">
            <summary>左スティック押し込み</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualXInputDevice.RightStickPush">
            <summary>右スティック押し込み</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualXInputDevice.DPadUp">
            <summary>十字キー上</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualXInputDevice.DPadUpRight">
            <summary>十字キー右上</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualXInputDevice.DPadRight">
            <summary>十字キー右</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualXInputDevice.DPadDownRight">
            <summary>十字キー右下</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualXInputDevice.DPadDown">
            <summary>十字キー下</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualXInputDevice.DPadDownLeft">
            <summary>十字キー左下</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualXInputDevice.DPadLeft">
            <summary>十字キー左</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualXInputDevice.DPadUpLeft">
            <summary>十字キー左上</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualXInputDevice.MappingItems">
            <summary>
            マッピングの対象となる要素の一覧（スティック、トリガー、ボタン、十字キー）
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualXInputDevice.SetDPad(KeyToKey.Plugins.DPadDirections)">
            <summary>
            十字キーをDpadDirectionsで設定します。
            </summary>
            <param name="direction"></param>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualXInputDevice.SetDPad(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            十字キーの状態を設定します。
            </summary>
            <param name="up">十字キー上／down: true, up: false</param>
            <param name="down">十字キー下／down: true, up: false</param>
            <param name="left">十字キー左／down: true, up: false</param>
            <param name="right">十字キー右／down: true, up: false</param>
        </member>
        <member name="T:KeyToKey.Plugins.IVirtualXInputStick">
            <summary>
            仮想XInputコントローラーのスティック
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualXInputStick.Mapping">
            <summary>
            マッピングの制御や状態を取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualXInputStick.Clockwise">
            <summary>
            時計回りかどうかを取得、または設定します。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualXInputStick.SetValue(System.Double,System.Double)">
            <summary>
            スティックの値を設定します。
            </summary>
            <param name="horizontal">[左]-1.0～1.0[右]</param>
            <param name="vertical">[上]-1.0～1.0[下]</param>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualXInputStick.SetValueByAngle(System.Double,System.Double)">
            <summary>
            スティックを角度と半径から設定します。
            </summary>
            <param name="angle">上が0で時計回りの角度（時計回りかどうかはClockwiseプロパティに依存）</param>
            <param name="radius">半径（0.0～1.0）</param>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualXInputStick.Neutral">
            <summary>
            スティックの入力をニュートラルにします。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualXInputStick.PushToUp(System.Double)">
            <summary>
            スティックを上に入力します。
            </summary>
            <param name="radius">半径（0.0～1.0）</param>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualXInputStick.PushToDown(System.Double)">
            <summary>
            スティックを下に入力します。
            </summary>
            <param name="radius">半径（0.0～1.0）</param>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualXInputStick.PushToLeft(System.Double)">
            <summary>
            スティックを左に入力します。
            </summary>
            <param name="radius">半径（0.0～1.0）</param>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualXInputStick.PushToRight(System.Double)">
            <summary>
            スティックを右に入力します。
            </summary>
            <param name="radius">半径（0.0～1.0）</param>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualXInputStick.PushToUpLeft(System.Double)">
            <summary>
            スティックを左上に入力します。
            </summary>
            <param name="radius">半径（0.0～1.0）</param>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualXInputStick.PushToUpRight(System.Double)">
            <summary>
            スティックを右上に入力します。
            </summary>
            <param name="radius">半径（0.0～1.0）</param>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualXInputStick.PushToDownLeft(System.Double)">
            <summary>
            スティックを左下に入力します。
            </summary>
            <param name="radius">半径（0.0～1.0）</param>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualXInputStick.PushToDownRight(System.Double)">
            <summary>
            スティックを右下に入力します。
            </summary>
            <param name="radius">半径（0.0～1.0）</param>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualXInputStick.Tap(KeyToKey.Plugins.StickDirections,System.Int32,System.Int32,System.Double)">
            <summary>
            スティックを特定の方向に入力し、ニュートラル状態に戻します。
            </summary>
            <param name="direction">入力方向</param>
            <param name="waitTimeAfterPush">入力した後の待機時間（ミリ秒）</param>
            <param name="waitTimeAfterNeutral">入力をニュートラルにした後の待機時間（ミリ秒）</param>
            <param name="radius">半径（0.0～1.0）</param>
        </member>
        <member name="T:KeyToKey.Plugins.IVirtualXInputTrigger">
            <summary>
            仮想XInputコントローラーのトリガー
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualXInputTrigger.Mapping">
            <summary>
            マッピングの制御や状態を取得します。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualXInputTrigger.SetValue(System.Double)">
            <summary>
            トリガーの値を設定します。
            </summary>
            <param name="value">トリガーの入力値（0.0～1.0）</param>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualXInputTrigger.Down(System.Int32,System.Double)">
            <summary>
            トリガーを押します。
            </summary>
            <param name="waitTime">押した後の待機時間（ミリ秒）</param>
            <param name="value">トリガーの入力値（0.0～1.0）</param>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualXInputTrigger.Up(System.Int32)">
            <summary>
            トリガーを離します。
            </summary>
            <param name="waitTime">離した後の待機時間（ミリ秒）</param>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualXInputTrigger.Tap(System.Int32,System.Int32,System.Double)">
            <summary>
            トリガーを押して離します。
            </summary>
            <param name="waitTimeAfterDown">押した後の待機時間（ミリ秒）</param>
            <param name="waitTimeAfterUp">離した後の待機時間（ミリ秒）</param>
            <param name="value">トリガーの入力値（0.0～1.0）</param>
        </member>
        <member name="T:KeyToKey.Plugins.IVirtualXInputButton">
            <summary>
            仮想XInputコントローラーのボタン
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualXInputButton.Mapping">
            <summary>
            マッピングの制御や状態を取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IVirtualXInputButton.State">
            <summary>
            ボタンの状態を設定します。true は押した状態、falseは離した状態です。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualXInputButton.Down(System.Int32)">
            <summary>
            ボタンを押します。
            </summary>
            <param name="waitTime">押した後の待機時間（ミリ秒）</param>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualXInputButton.Up(System.Int32)">
            <summary>
            ボタンを離します。
            </summary>
            <param name="waitTime">離した後の待機時間（ミリ秒）</param>
        </member>
        <member name="M:KeyToKey.Plugins.IVirtualXInputButton.Tap(System.Int32,System.Int32)">
            <summary>
            ボタンを押して離します。
            </summary>
            <param name="waitTimeAfterDown">押した後の待機時間（ミリ秒）</param>
            <param name="waitTimeAfterUp">離した後の待機時間（ミリ秒）</param>
        </member>
        <member name="T:KeyToKey.Plugins.IWaitConfig">
            <summary>
            待機処理の設定
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IWaitConfig.Wait">
            <summary>
            <seealso cref="M:KeyToKey.Plugins.IGlobals.Wait(System.Int32)"/> <seealso cref="M:KeyToKey.Plugins.IGlobals.Wait(System.TimeSpan)"/> の設定
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IWaitConfig.Keyboard">
            <summary>
            キーボード関係で使用される待機処理の設定
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IWaitConfig.Mouse">
            <summary>
            マウス関係で使用される待機処理の設定
            </summary>
        </member>
        <member name="T:KeyToKey.Plugins.IWaitConfigProperties">
            <summary>
            待機処理の設定プロパティ
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IWaitConfigProperties.HighPrecision">
            <summary>
            高精度／高負荷な待機方法を使用するかどうか
            </summary>
        </member>
        <member name="T:KeyToKey.Plugins.IWaiter">
            <summary>
            待機処理を行うインターフェイス
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IWaiter.Wait">
            <summary>
            待機を行います。
            </summary>
            <returns>キャンセルされたかどうか true: キャンセルされた, false: キャンセルされてない</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IWaiter.Wait(System.Int32)">
            <summary>
            待機を行います。
            </summary>
            /// <returns>キャンセルされたかどうか true: キャンセルされた, false: キャンセルされてない</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IWaiter.Wait(System.TimeSpan)">
            <summary>
            待機を行います。
            </summary>
            /// <returns>キャンセルされたかどうか true: キャンセルされた, false: キャンセルされてない</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IWaiter.Cancel">
            <summary>
            待機のキャンセルを行います。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IWaiter.CancellationTokenSource">
            <summary>
            内部で使用されるCancellationTokenSourceのインスタンス
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IWaiter.HighPrecision">
            <summary>
            高精度で高負荷な待機処理を使用するかどうかを取得または設定を行います。
            </summary>
        </member>
        <member name="T:KeyToKey.Plugins.IWindow">
            <summary>
            ウィンドウ
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IWindow.Activate(System.String,System.Boolean)">
            <summary>
            指定されたプロセス名のウィンドウをアクティブにします。
            </summary>
            <param name="processName">プロセス名</param>
            <param name="allWindow">true:見つかったすべてのウィンドウをアクティブにしていく</param>
        </member>
        <member name="M:KeyToKey.Plugins.IWindow.Activate(System.IntPtr)">
            <summary>
            指定されたウィンドウをアクティブにする。
            </summary>
            <param name="handle">ウィンドウのハンドル</param>
        </member>
        <member name="M:KeyToKey.Plugins.IWindow.SetWindowLong(System.IntPtr,KeyToKey.Enums.GWL,System.Int64)">
            <summary>
            指定されたウィンドウの属性を変更します。
            </summary>
            <param name="handle">ウィンドウのハンドル</param>
            <param name="nIndex">変更する情報</param>
            <param name="dwLong">セットする値</param>
            <returns></returns>
        </member>
        <member name="M:KeyToKey.Plugins.IWindow.SetWindowPosition(System.IntPtr,KeyToKey.Enums.WindowInsertAfter,System.Int32,System.Int32,System.Int32,System.Int32,KeyToKey.Enums.WindowPositionFlags)">
            <summary>
            ウィンドウの位置や幅、Zオーダーを設定します。
            </summary>
            <param name="handle"></param>
            <param name="instance"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:KeyToKey.Plugins.IWindow.SetWindowState(System.IntPtr,KeyToKey.Enums.WindowStates)">
            <summary>
            ウィンドウの表示状態を設定します。
            </summary>
            <param name="handle">ウィンドウのハンドル</param>
            <param name="state">ウィンドウの状態</param>
            <returns></returns>
        </member>
        <member name="M:KeyToKey.Plugins.IWindow.SetWindowText(System.IntPtr,System.String)">
            <summary>
            ウィンドウタイトルを変更します。
            </summary>
            <param name="handle">ウィンドウのハンドル</param>
            <param name="text">テキスト</param>
            <returns></returns>
        </member>
        <member name="M:KeyToKey.Plugins.IWindow.SetForegroundWindow(System.IntPtr)">
            <summary>
            全面に表示するウィンドウをセットします。
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:KeyToKey.Plugins.IWindow.GetLocation(System.IntPtr)">
            <summary>
            ウィンドウの座標を取得します。
            </summary>
            <param name="handle">ウィンドウのハンドル</param>
            <returns></returns>
        </member>
        <member name="M:KeyToKey.Plugins.IWindow.GetClientLocation(System.IntPtr)">
            <summary>
            タイトルバー（キャプションバー）を含まないクライアント領域の座標を取得します。
            </summary>
            <param name="handle">ウィンドウのハンドル</param>
            <returns></returns>
        </member>
        <member name="M:KeyToKey.Plugins.IWindow.GetSize(System.IntPtr)">
            <summary>
            ウィンドウのサイズを取得します。
            </summary>
            <param name="handle">ウィンドウのハンドル</param>
        </member>
        <member name="M:KeyToKey.Plugins.IWindow.GetClientSize(System.IntPtr)">
            <summary>
            ウィンドウのサイズを取得します。
            </summary>
            <param name="handle">ウィンドウのハンドル</param>
        </member>
        <member name="M:KeyToKey.Plugins.IWindow.GetWindowTitlte(System.IntPtr)">
            <summary>
            ウィンドウのタイトルを取得します。
            </summary>
            <param name="handle">ウィンドウのハンドル</param>
            <returns></returns>
        </member>
        <member name="M:KeyToKey.Plugins.IWindow.GetClassName(System.IntPtr)">
            <summary>
            ウィンドウのクラス名を取得します。
            </summary>
            <param name="handle">ウィンドウのハンドル</param>
            <returns></returns>
        </member>
        <member name="M:KeyToKey.Plugins.IWindow.GetWindowLong(System.IntPtr,KeyToKey.Enums.GWL)">
            <summary>
            情報を取得するウィンドウのハンドルを指定します。
            </summary>
            <param name="handle">ウィンドウのハンドル</param>
            <param name="nIndex">取得する情報</param>
            <returns></returns>
        </member>
        <member name="M:KeyToKey.Plugins.IWindow.IsMinimized(System.IntPtr)">
            <summary>
            ウィンドウが最小化されているかどうかを取得します。
            </summary>
            <param name="handle">ウィンドウのハンドル</param>
            <returns></returns>
        </member>
        <member name="M:KeyToKey.Plugins.IWindow.IsMaximized(System.IntPtr)">
            <summary>
            ウィンドウが最大化されているかどうかを取得します。
            </summary>
            <param name="handle">ウィンドウのハンドル</param>
            <returns></returns>
        </member>
        <member name="P:KeyToKey.Plugins.IWindow.ActiveProcessName">
            <summary>
            アクティブになっているウィンドウのプロセス名を取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IWindow.ActiveWindowHandle">
            <summary>
            アクティブになっているウィンドウのウィンドウハンドルを取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IWindow.ActiveWindowBounds">
            <summary>
            アクティブになっているウィンドウの位置と範囲を取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IWindow.ActiveWindowClientBounds">
            <summary>
            アクティブになっているウィンドウのクライアント領域の位置と範囲を取得します。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IWindow.ShowTextBoxDialog``1(System.String,System.String,System.Boolean,System.Boolean,``0@)">
            <summary>
            テキストボックスを表示します。
            </summary>
            <typeparam name="T">テキストを解析・変換後の型</typeparam>
            <param name="title">ウィンドウのタイトル</param>
            <param name="initialText">初期テキスト</param>
            <param name="applyRules">KeyToKeyの値ルールを適用するかどうか</param>
            <param name="restoreWindow">ウィンドウが閉じられた後に開始前のウィンドウを表示する</param>
            <param name="result">入力されたテキスト、値ルールを適用している場合はTの型へ変換されます。</param>
            <returns>正常：True、 異常：False</returns>
        </member>
        <member name="T:KeyToKey.Plugins.IWindowController">
            <summary>
            ウィンドウの操作や情報取得機能を提供します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IWindowController.Handle">
            <summary>
            ウィンドウハンドル
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IWindowController.Parent">
            <summary>
            親ウィンドウのウィンドウコントローラー
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IWindowController.Title">
            <summary>
            ウィンドウのタイトル
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IWindowController.ClassName">
            <summary>
            ウィンドウのクラス名
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IWindowController.Text">
            <summary>
            ウィンドウが持つテキスト
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IWindowController.Bounds">
            <summary>
            ウィンドウの位置と範囲を取得または設定します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IWindowController.ClientBounds">
            <summary>
            ウィンドウのクライアント領域の位置と範囲
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IWindowController.ChildWindows">
            <summary>
            ウィンドウより下にある全ての子ウィンドウのリスト
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IWindowController.ChildWindowCollection">
            <summary>
            ウィンドウより下にある全ての子ウィンドウのリスト
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IWindowController.IsMaximized">
            <summary>
            ウィンドウが最大化されているかどうか
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IWindowController.IsMinimized">
            <summary>
            ウィンドウが最小化されているかどうか
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IWindowController.AlwaysOnTop">
            <summary>
            ウィンドウが最前面に表示されているかどうかを取得、設定します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IWindowController.State">
            <summary>
            ウィンドウの状態（表示されているかどうか、最大化されているかどうか、最小化さているかどうかなど）
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IWindowController.ProcessName">
            <summary>
            プロセス名
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IWindowController.ProcessId">
            <summary>
            プロセスID
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IWindowController.IsWindow">
            <summary>
            ウィンドウが存在するかどうか
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IWindowController.Exists">
            <summary>
            ウィンドウが存在するかどうか
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IWindowController.IsWindowVisible">
            <summary>
            ウィンドウが表示されているかどうか
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IWindowController.Activate">
            <summary>
            ウィンドウを画面に表示させます。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IWindowController.SetExStyle(System.Boolean,System.Boolean)">
            <summary>
            ウィンドウのスタイルを変更します。変更したスタイルを元に戻すには<seealso cref="M:KeyToKey.Plugins.IWindowController.SetDefaultExStyle"/>を使用します。
            </summary>
            <param name="transparent">マウスクリックができないウィンドウを作成します。</param>
            <param name="noActive">フォーカスすることができないウィンドウを作成します。</param>
        </member>
        <member name="M:KeyToKey.Plugins.IWindowController.SetDefaultExStyle">
            <summary>
            ウィンドウのスタイルをデフォルトに戻します。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IWindowController.SetBounds(KeyToKey.Plugins.Bounds,KeyToKey.Enums.WindowInsertAfter,KeyToKey.Enums.WindowPositionFlags)">
            <summary>
            ウィンドウの位置と範囲を設定します。
            </summary>
            <param name="bounds">位置と範囲</param>
            <param name="windowInsertAfter">ウィンドウの順序（Zオーダー）</param>
            <param name="windowPositionFlags">フラグ</param>
        </member>
        <member name="M:KeyToKey.Plugins.IWindowController.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32,KeyToKey.Enums.WindowInsertAfter,KeyToKey.Enums.WindowPositionFlags)">
            <summary>
            ウィンドウの位置と範囲を設定します。
            </summary>
            <param name="left">横の位置</param>
            <param name="top">縦の位置</param>
            <param name="width">横の範囲</param>
            <param name="height">縦の範囲</param>
            <param name="windowInsertAfter">ウィンドウの順序（Zオーダー）</param>
            <param name="windowPositionFlags">フラグ</param>
        </member>
        <member name="M:KeyToKey.Plugins.IWindowController.Close">
            <summary>
            ウィンドウに対して終了メッセージを送信します。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IWindowController.Maximize">
            <summary>
            ウィンドウを最大化します。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IWindowController.Minimize">
            <summary>
            ウィンドウを最小化します。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IWindowController.Restore">
            <summary>
            最小化もしくは最大化されたウィンドウをもとに戻します。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IWindowController.Dump">
            <summary>
            コンソールにウィンドウの情報を出力します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.KeyInputEventArgs.Key">
            <summary>
            押されたキー
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.KeyInputEventArgs.IsPressed">
            <summary>
            キーが押されたかどうか
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.KeyInputEventArgs.IsInjected">
            <summary>
            アプリによって入力されたかどうか
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.KeyInputEventArgs.IsCancel">
            <summary>
            キャンセルするかどうか
            </summary>
        </member>
        <member name="T:KeyToKey.Plugins.IStatusTable">
            <summary>
            キーの状態
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IStatusTable.Item(KeyToKey.Enums.Keys)">
            <summary>
            キーの状態を取得します。
            </summary>
            <param name="key">キー</param>
            <returns>押されていたら true 離されていたら false を返します。</returns>
        </member>
        <member name="T:KeyToKey.Plugins.KeyStateChangedEventArgs">
            <summary>
            KeyStatusChanged
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.KeyStateChangedEventArgs.Key">
            <summary>
            キー
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.KeyStateChangedEventArgs.IsPressed">
            <summary>
            押されているかどうか
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.KeyStateChangedEventArgs.IsCancel">
            <summary>
            入力をキャンセルする場合はtrueにしてください。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.KeyStateChangedEventArgs.IsInjected">
            <summary>
            アプリによる入力かどうか
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.KeyStateChangedEventArgs.#ctor(KeyToKey.Enums.Keys,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="Key">キー</param>
            <param name="IsPressed">押されているかどうか</param>
            <param name="IsInjected">アプリによる入力かどうか</param>
        </member>
        <member name="M:KeyToKey.Plugins.KeyStateChangedEventArgs.#ctor(KeyToKey.Plugins.IGlobals,KeyToKey.Enums.Keys,System.Boolean,System.Boolean)">
            <summary>
            </summary>
            <param name="g">@this or @base</param>
            <param name="Key">キー</param>
            <param name="IsPressed">押されているかどうか</param>
            <param name="IsInjected">アプリによる入力かどうか</param>
        </member>
        <member name="M:KeyToKey.Plugins.KeyStateChangedEventArgs.Convert(KeyToKey.Enums.Keys,KeyToKey.Enums.Keys,KeyToKey.Enums.Keys[])">
            <summary>
            キーの入力を変換します。入力イベントがアプリによるものであった場合は変換しません。
            </summary>
            <param name="from">対象とするキー</param>
            <param name="to">変換後のキー</param>
            <param name="modifiers">同時押しのキー</param>
        </member>
        <member name="M:KeyToKey.Plugins.KeyStateChangedEventArgs.Convert(KeyToKey.Enums.Keys,KeyToKey.Enums.Keys,System.Func{System.Boolean})">
            <summary>
            条件を指定してキーの入力を変換します。入力イベントがアプリによるものであった場合は変換しません。
            </summary>
            <param name="from">対象とするキー</param>
            <param name="to">変換後のキー</param>
            <param name="condition">追加の条件</param>
        </member>
        <member name="T:KeyToKey.Plugins.MatchResult">
            <summary>
            画像認識の結果
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.MatchResult.X">
            <summary>
            見つかった横の中央座標
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.MatchResult.Y">
            <summary>
            見つかった縦の央座標
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.MatchResult.Score">
            <summary>
            類似度(0.0～1.0)
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.MatchResult.Config">
            <summary>
            画像認識の設定
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.MatchResult.FoundBounds">
            <summary>
            画像認識で見つかった座標と範囲
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.MatchResult.#ctor(System.Int32,System.Int32,System.Double,System.Drawing.Rectangle,KeyToKey.Plugins.TemplateMatchingConfig)">
            <summary>
            画像認識の結果
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="score"></param>
            <param name="rectangle"></param>
            <param name="config"></param>
        </member>
        <member name="T:KeyToKey.Plugins.MouseGesture">
            <summary>
             マウスジェスチャーの機能を提供するクラス
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.MouseGesture.ShowOutputResultInfo">
            <summary>ジェスチャーの認識結果をコンソールに表示するかどうか</summary>
        </member>
        <member name="P:KeyToKey.Plugins.MouseGesture.LastGestureRecognitionResult">
            <summary>最後に認識したジェスチャーの結果</summary>
        </member>
        <member name="P:KeyToKey.Plugins.MouseGesture.DeadZone">
            <summary>ジェスチャーが実行されない距離</summary>
        </member>
        <member name="P:KeyToKey.Plugins.MouseGesture.CanWork">
            <summary>ジェスチャーが実行できるかどうか</summary>
        </member>
        <member name="M:KeyToKey.Plugins.MouseGesture.#ctor(KeyToKey.Plugins.IGlobals,KeyToKey.Plugins.GestureDefitionGroup[])">
            <summary>
             インスタンスを作成した時点からマウスジェスチャーの入力受付を開始します。
            </summary>
            <param name="globals">「@this」や「@base」プロパティ</param>
            <param name="gestureDefinitionGroups">ジェスチャーグループの配列</param>
        </member>
        <member name="M:KeyToKey.Plugins.MouseGesture.Handle(System.Object,System.Boolean,System.Boolean)">
            <summary>
             ジェスチャーの開始（スタートキー／ボタンが押されたとき）、認識処理、もしくは、トリガーの入力（スタートキー／ボタンが離された時）
            </summary>
            <param name="inputValue">発生した入力の値</param>
            <param name="isPressed">押されたかどうか</param>
            <param name="cancel"></param>
            <returns>入力をキャンセルするかどうか（キー／マウス用）</returns>
        </member>
        <member name="M:KeyToKey.Plugins.MouseGesture.StartGesture(KeyToKey.Plugins.GestureDefitionGroup)">
            <summary>
             ジェスチャーの入力収集を開始する
            </summary>
            <param name="group">実行するジェスチャーグループ</param>
        </member>
        <member name="M:KeyToKey.Plugins.MouseGesture.TapStartKey(KeyToKey.Plugins.StartKey)">
            <summary>
             トリガーの入力を発生させる（キーのみ）
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.MouseGesture.Recognize">
            <summary>
             ジェスチャーの認識、コールバック、実行中のジェスチャーグループを解除を行う
            </summary>
        </member>
        <member name="T:KeyToKey.Plugins.GestureDefition">
            <summary>
             ジェスチャーパターンの名前とジェスチャーが入力された場合に実行するデリゲートを持つクラス
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.GestureDefition.Name">
            <summary>ジェスチャーパターンの名前</summary>
        </member>
        <member name="P:KeyToKey.Plugins.GestureDefition.Probability">
            <summary>どの程度の確率（類似度）でコールバックを実行するか（0.0～1.0 初期値は0.8）</summary>
        </member>
        <member name="P:KeyToKey.Plugins.GestureDefition.CanCallback">
            <summary>デリゲートの実行条件</summary>
        </member>
        <member name="P:KeyToKey.Plugins.GestureDefition.Callback">
            <summary>ジェスチャーが入力された場合に実行するデリゲート</summary>
        </member>
        <member name="M:KeyToKey.Plugins.GestureDefition.#ctor(System.String,System.Action,System.Double,System.Func{System.Boolean})">
            <summary>
             コンストラクタ
            </summary>
            <param name="name">ジェスチャーパターンの名前</param>
            <param name="callback">ジェスチャーが入力された場合に実行するデリゲート</param>
            <param name="probability">どの程度の確率（類似度）でコールバックを実行するか（0.0～1.0 初期値は0.8）</param>
            <param name="canCallback">デリゲートの実行条件</param>
        </member>
        <member name="T:KeyToKey.Plugins.GestureDefitionGroup">
            <summary>
             トリガーとジェスチャーの定義配列を持つクラス
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.GestureDefitionGroup.StartTrigger">
            <summary>ジェスチャーの開始トリガー</summary>
        </member>
        <member name="P:KeyToKey.Plugins.GestureDefitionGroup.GestureDefitions">
            <summary>ジェスチャーの定義配列</summary>
        </member>
        <member name="P:KeyToKey.Plugins.GestureDefitionGroup.KeyCancel">
            <summary>開始キーの入力をキャンセルするかどうか</summary>
        </member>
        <member name="P:KeyToKey.Plugins.GestureDefitionGroup.AllowsInjectedMove">
            <summary>アプリによるマウス移動を許可するかどうか</summary>
        </member>
        <member name="M:KeyToKey.Plugins.GestureDefitionGroup.#ctor(KeyToKey.Enums.Keys,KeyToKey.Plugins.GestureDefition[])">
            <summary>
             
            </summary>
            <param name="startKey">ジェスチャーの開始キー</param>
            <param name="gestureDefitions">ジェスチャーの定義配列</param>
        </member>
        <member name="M:KeyToKey.Plugins.GestureDefitionGroup.#ctor(KeyToKey.Enums.ControllerButtons,KeyToKey.Plugins.GestureDefition[])">
            <summary>
             
            </summary>
            <param name="button">ジェスチャーの開始ボタン</param>
            <param name="gestureDefitions">ジェスチャーの定義配列</param>
        </member>
        <member name="M:KeyToKey.Plugins.GestureDefitionGroup.Find(System.String)">
            <summary>
             パターンの名前から定義を探します。
            </summary>
            <param name="patternName">パターンの名前</param>
        </member>
        <member name="T:KeyToKey.Plugins.Point">
            <summary>
            位置を示すクラスです。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.Point.X">
            <summary>
            横の座標
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.Point.Y">
            <summary>
            縦の座標
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.Point.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="X">横の座標</param>
            <param name="Y">縦の座標</param>
        </member>
        <member name="M:KeyToKey.Plugins.Point.ToTuple">
            <summary>
            位置をタプルで返します。
            </summary>
            <returns></returns>
        </member>
        <member name="T:KeyToKey.Plugins.IMoveMethodOptions">
            <summary>
            Moveメソッドのオプションを表すインターフェイスです。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IMoveMethodOptions.OriginX">
            <summary>
            原点座標のX軸方向の位置を取得または設定します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IMoveMethodOptions.OriginY">
            <summary>
            原点座標のY軸方向の位置を取得または設定します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IMoveMethodOptions.RandomOffsetRangeX">
            <summary>
            x座標に加える乱数の範囲を表します。値を5に設定した場合、-5から5の範囲で乱数が生成され座標に加えられます。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IMoveMethodOptions.RandomOffsetRangeY">
            <summary>
            y座標に加える乱数の範囲を表します。値を5に設定した場合、-5から5の範囲で乱数が生成され座標に加えられます。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IMoveMethodOptions.SetOrigin(System.Int32,System.Int32)">
            <summary>
            原点を設定します。
            </summary>
            <param name="x">原点座標のX軸方向の位置</param>
            <param name="y">原点座標のY軸方向の位置</param>
        </member>
        <member name="M:KeyToKey.Plugins.IMoveMethodOptions.SetOrigin(System.ValueTuple{System.Int32,System.Int32})">
            <summary>
            原点を設定します。
            </summary>
            <param name="point">原点座標の位置</param>
        </member>
        <member name="M:KeyToKey.Plugins.IMoveMethodOptions.SetOrigin(KeyToKey.Plugins.Bounds)">
            <summary>
            原点を設定します。
            </summary>
            <param name="bounds">原点座標のBounds(Bounds.LeftとBounds.Topが使用されます)</param>
        </member>
        <member name="M:KeyToKey.Plugins.IMoveMethodOptions.SetRandomOffsetRange(System.Int32,System.Int32)">
            <summary>
            座標に加える乱数の範囲を設定します。値を5に設定した場合、-5から5の範囲で乱数が生成され座標に加えられます。
            </summary>
            <param name="x">乱数の範囲</param>
            <param name="y">乱数の範囲</param>
        </member>
        <member name="M:KeyToKey.Plugins.IMoveMethodOptions.SetRandomOffsetRange(System.ValueTuple{System.Int32,System.Int32})">
            <summary>
            座標に加える乱数の範囲を設定します。値を5に設定した場合、-5から5の範囲で乱数が生成され座標に加えられます。
            </summary>
            <param name="range">乱数の範囲</param>
        </member>
        <member name="M:KeyToKey.Plugins.IMoveMethodOptions.CreateRandomOffset">
            <summary>
            設定されたRandomOffsetRangeプロパティから乱数を生成します。
            </summary>
            <returns></returns>
        </member>
        <member name="T:KeyToKey.Plugins.ITemplateMatchingConfigsHolder">
            <summary>
            画像認識の設定を保持するインターフェイス
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.ITemplateMatchingConfigsHolder.Identifiers">
            <summary>
            識別キーの一覧を取得します。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.ITemplateMatchingConfigsHolder.Contains(System.String)">
            <summary>
            指定した識別キーの設定が存在するかどうかを取得します。
            </summary>
            <param name="identifer">識別キー</param>
            <returns>識別キーの設定が存在するかどうかを取得します。</returns>
        </member>
        <member name="P:KeyToKey.Plugins.ITemplateMatchingConfigsHolder.Item(System.String)">
            <summary>
            画像認識の設定を取得するインデクサ
            </summary>
            <param name="identifier">設定の識別キー</param>
            <returns>画像認識の設定</returns>
        </member>
        <member name="T:KeyToKey.Plugins.TemplateMatchingConfig">
            <summary>
            画像認識の設定
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.TemplateMatchingConfig.#ctor(System.String,System.Double,KeyToKey.Plugins.TemplateImage,KeyToKey.Plugins.Bounds)">
            <summary>
            コンストラクタ
            </summary>
            <param name="identifier">識別キー</param>
            <param name="score">スコア(0.0～1.0)</param>
            <param name="templateImage">テンプレート画像</param>
            /// <param name="searchBounds">探索範囲</param>
        </member>
        <member name="P:KeyToKey.Plugins.TemplateMatchingConfig.Identifier">
            <summary>
            識別キー
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.TemplateMatchingConfig.Score">
            <summary>
            スコア
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.TemplateMatchingConfig.Process">
            <summary>
            プロセス名かウィンドウハンドルを文字列化した値
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.TemplateMatchingConfig.TemplateImage">
            <summary>
            テンプレート画像
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.TemplateMatchingConfig.SearchBounds">
            <summary>
            探索範囲
            </summary>
        </member>
        <member name="T:KeyToKey.Plugins.TemplateImage">
            <summary>
            テンプレート画像
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.TemplateImage.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            コンストラクタ
            </summary>
            <param name="path">テンプレート画像のパス</param>
            <param name="width">画像の横幅</param>
            <param name="height">画像の高さ</param>
        </member>
        <member name="P:KeyToKey.Plugins.TemplateImage.Path">
            <summary>
            テンプレート画像のパス
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.TemplateImage.Width">
            <summary>
            画像の横幅
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.TemplateImage.Height">
            <summary>
            画像の高さ
            </summary>
        </member>
        <member name="T:KeyToKey.Plugins.IXInput">
            <summary>
            XInputコントローラー
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IXInput.GetState(System.Int32)">
            <summary>
            XInputコントローラーの状態を取得します。
            </summary>
            <param name="userIndex">デバイス番号</param>
            <returns></returns>
        </member>
        <member name="M:KeyToKey.Plugins.IXInput.IsConnected(System.Int32)">
            <summary>
            XInputコントローラーの接続が確立されているかどうかを取得します。
            </summary>
            <param name="userIndex">デバイス番号</param>
            <returns></returns>
        </member>
        <member name="M:KeyToKey.Plugins.IXInput.SetVibration(System.Int32,System.UInt16,System.UInt16)">
            <summary>
            XInputコントローラーのバイブレーション設定を行います。
            </summary>
            <param name="userIndex">デバイス番号</param>
            <param name="leftMotorSpeed">左のモーター</param>
            <param name="rightMotorSpeed">右のモーター</param>
        </member>
        <member name="T:KeyToKey.Plugins.IXInputState">
            <summary>
            XInputの状態
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IXInputState.LeftTrigger">
            <summary>
            左トリガー
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IXInputState.RightTrigger">
            <summary>
            右トリガー
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IXInputState.LeftStickX">
            <summary>
            左スティックの水平
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IXInputState.LeftStickY">
            <summary>
            左スティックの垂直
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IXInputState.RightStickX">
            <summary>
            右スティックの水平
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IXInputState.RightStickY">
            <summary>
            左スティックの垂直
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IXInputState.NormalizedLeftStick">
            <summary>正規化された左スティック</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IXInputState.NormalizedRightStick">
            <summary>正規化された右スティック</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IXInputState.NormalizedLeftTrigger">
            <summary>正規化された左トリガー</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IXInputState.NormalizedRightTrigger">
            <summary>正規化された右トリガー</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IXInputState.A">
            <summary>Aボタン</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IXInputState.B">
            <summary>Bボタン</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IXInputState.X">
            <summary>Xボタン</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IXInputState.Y">
            <summary>Yボタン</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IXInputState.Back">
            <summary>Backボタン</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IXInputState.Start">
            <summary>Startボタン</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IXInputState.RB">
            <summary>RBボタン</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IXInputState.LB">
            <summary>LBボタン</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IXInputState.LeftStickPush">
            <summary>LeftStickPushボタン</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IXInputState.RightStickPush">
            <summary>RightStickPushボタン</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IXInputState.DPadUpLeft">
            <summary>十字キー左上</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IXInputState.DPadUpRight">
            <summary>十字キー右上</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IXInputState.DPadDownLeft">
            <summary>十字キー左下</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IXInputState.DPadDownRight">
            <summary>十字キー右下</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IXInputState.DPadUp">
            <summary>十字キー上</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IXInputState.DPadDown">
            <summary>十字キー下</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IXInputState.DPadLeft">
            <summary>十字キー左</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IXInputState.DPadRight">
            <summary>十字キー右</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IXInputState.DpadDirection">
            <summary>十字キーの入力方向</summary>
        </member>
        <member name="M:KeyToKey.Plugins.IXInputState.IsPressed(KeyToKey.Enums.XInputButtons)">
            <summary>
            ボタンが押されているかどうかを取得します。
            </summary>
            <param name="button">ボタン</param>
            <returns></returns>
        </member>
        <member name="T:KeyToKey.Plugins.INormalizedXInputTrigger">
            <summary>
            正規化されたトリガーの値
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.INormalizedXInputTrigger.Value">
            <summary>
            トリガーの値（0.0～1.0）
            </summary>
        </member>
        <member name="T:KeyToKey.Plugins.INormalizedXInputStick">
            <summary>
            正規化されたスティックの値
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.INormalizedXInputStick.Horizontal">
            <summary>
            水平の値（-1.0[左]～1.0[右]）
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.INormalizedXInputStick.Vertical">
            <summary>
            垂直の値（-1.0[上]～1.0[下]）
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.INormalizedXInputStick.DistanceFromCenter">
            <summary>
            中心（Horizontal: 0.0, Vertical: 0.0）からの距離（0.0～1.0）
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.INormalizedXInputStick.Angle">
            <summary>
            （Horizontal: 0.0, Vertical: 0.0）を中心とする上が0.0で時計回りの角度（0.0～359.9）を取得します。
            </summary>
        </member>
        <member name="T:KeyToKey.Plugins.IXInputButton">
            <summary>
            XInputのボタン
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IXInputButton.IsPressed">
            <summary>
            押されているかどうか
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IvJoy.IsInstalled">
            <summary>
            vJoyがインストールされているかどうかを取得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IvJoy.PrimaryDevice">
            <summary>
            KeyToKeyで使用されるvJoyのデバイスを取得します。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IvJoy.GetDevice(System.Int32)">
            <summary>
            指定した番号のvJoyのデバイスを取得します。
            </summary>
            <param name="index">デバイス番号1～16</param>
            <returns><see cref="T:KeyToKey.Plugins.IvJoyDevice"/></returns>
        </member>
        <member name="P:KeyToKey.Plugins.IvJoy.Item(System.Int32)">
            <summary>
            指定した番号のvJoyのデバイスを取得します。
            </summary>
            <param name="index">デバイス番号1～16</param>
            <returns><see cref="T:KeyToKey.Plugins.IvJoyDevice"/></returns>
        </member>
        <member name="P:KeyToKey.Plugins.IvJoyDevice.Index">
            <summary>
            デバイス番号
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IvJoyDevice.Raw">
            <summary>
            vJoyのボタンやスティックを直接操作するプロパティを提供します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IvJoyDevice.WithMapping">
            <summary>
            vJoyのボタンやスティックをDirectInputのマッピングの設定を使用して操作するプロパティを提供します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IvJoyDevice.IsConnected">
            <summary>
            デバイスが接続されているかどうかを習得します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IvJoyDevice.IsPrimary">
            <summary>
            PrimaryDeviceかどうかを取得します。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IvJoyDevice.Connect">
            <summary>
            デバイスに接続します。
            </summary>
            <returns>接続が成功したかどうかを取得します。</returns>
        </member>
        <member name="M:KeyToKey.Plugins.IvJoyDevice.Disconnect">
            <summary>
            デバイスとの接続を切断します。
            </summary>
            <returns></returns>
        </member>
        <member name="T:KeyToKey.Plugins.IRawvJoy">
            <summary>
            vJoyのボタンやスティックを直接操作するプロパティを提供します。
            </summary>
        </member>
        <member name="T:KeyToKey.Plugins.IvJoyDpad">
            <summary>
            vJoyの十字キー
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IvJoyDpad.Direction">
            <summary>
            十字キーの入力を設定します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IvJoyDpad.DirectionNumber">
            <summary>
            十字キーの入力方向を番号で設定します。[ニュートラル]-1, [上]0, [右上]2, [右]3, [右下]4, [下]5, [左下]6, [左]7, [左上]8
            </summary>
        </member>
        <member name="T:KeyToKey.Plugins.IvJoyButton">
            <summary>
            vJoyのボタン
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IvJoyButton.State">
            <summary>
            ボタンの状態を設定します。true は押した状態、falseは離した状態です。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IvJoyButton.Down(System.Int32)">
            <summary>
            ボタンを押します。
            </summary>
            <param name="waitTimeAfterDown">押した後の待機時間（ミリ秒）</param>
        </member>
        <member name="M:KeyToKey.Plugins.IvJoyButton.Up(System.Int32)">
            <summary>
            ボタンを離します。
            </summary>
            <param name="waitTimeAfterUp">離した後の待機時間（ミリ秒）</param>
        </member>
        <member name="M:KeyToKey.Plugins.IvJoyButton.Tap(System.Int32,System.Int32)">
            <summary>
            ボタンを押して離します。
            </summary>
            <param name="waitTimeAfterDown">押した後の待機時間（ミリ秒）</param>
            <param name="waitTimeAfterUp">離した後の待機時間（ミリ秒）</param>
        </member>
        <member name="T:KeyToKey.Plugins.IvJoyAxis">
            <summary>
            vJoyの軸系
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IvJoyAxis.Value">
            <summary>
            軸の値を設定します（0.0～1.0）
            </summary>
        </member>
        <member name="T:KeyToKey.Plugins.IvJoyWithMapping">
            <summary>
            vJoyのボタンやスティックをDirectInputのマッピングの設定を使用して操作するプロパティを提供します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IvJoyWithMapping.Items">
            <summary>ボタンやスティック、トリガー、十字キーのマッピング設定の集合</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IvJoyWithMapping.Dpad">
            <summary>十字キー</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IvJoyWithMapping.LeftStick">
            <summary>左スティック</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IvJoyWithMapping.RightStick">
            <summary>右スティック</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IvJoyWithMapping.LeftTrigger">
            <summary>左トリガー</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IvJoyWithMapping.RightTrigger">
            <summary>右トリガー</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IvJoyWithMapping.A">
            <summary>Aボタン</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IvJoyWithMapping.B">
            <summary>Bボタン</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IvJoyWithMapping.X">
            <summary>Xボタン</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IvJoyWithMapping.Y">
            <summary>Yボタン</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IvJoyWithMapping.Back">
            <summary>Backボタン</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IvJoyWithMapping.Start">
            <summary>Startボタン</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IvJoyWithMapping.RB">
            <summary>RBボタン</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IvJoyWithMapping.LB">
            <summary>LBボタン</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IvJoyWithMapping.LeftStickPush">
            <summary>左スティック押し込み</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IvJoyWithMapping.RightStickPush">
            <summary>右スティック押し込み</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IvJoyWithMapping.ExButton1">
            <summary>拡張ボタン1</summary>et; }
        </member>
        <member name="P:KeyToKey.Plugins.IvJoyWithMapping.ExButton2">
            <summary>拡張ボタン2</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IvJoyWithMapping.ExButton3">
            <summary>拡張ボタン3</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IvJoyWithMapping.ExButton4">
            <summary>拡張ボタン4</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IvJoyWithMapping.ExButton5">
            <summary>拡張ボタン5</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IvJoyWithMapping.ExButton6">
            <summary>拡張ボタン6</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IvJoyWithMapping.ExButton7">
            <summary>拡張ボタン7</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IvJoyWithMapping.ExButton8">
            <summary>拡張ボタン8</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IvJoyWithMapping.ExButton9">
            <summary>拡張ボタン9</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IvJoyWithMapping.ExButton10">
            <summary>拡張ボタン10</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IvJoyWithMapping.ExButton11">
            <summary>拡張ボタン11</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IvJoyWithMapping.ExButton12">
            <summary>拡張ボタン12</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IvJoyWithMapping.ExButton13">
            <summary>拡張ボタン13</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IvJoyWithMapping.ExButton14">
            <summary>拡張ボタン14</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IvJoyWithMapping.ExButton15">
            <summary>拡張ボタン15</summary>
        </member>
        <member name="P:KeyToKey.Plugins.IMappingImplementation.Mapping">
            <summary>
            マッピングの設定
            </summary>
        </member>
        <member name="T:KeyToKey.Plugins.IvJoyDpadWithMapping">
            <summary>
            DirectInputのマッピングの設定を使用してvJoyの十字キーを操作します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IvJoyDpadWithMapping.Direction">
            <summary>
            十字キーの入力を設定します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IvJoyDpadWithMapping.DirectionNumber">
            <summary>
            十字キーの入力方向を番号で設定します。[ニュートラル]-1, [上]0, [右上]2, [右]3, [右下]4, [下]5, [左下]6, [左]7, [左上]8
            </summary>
        </member>
        <member name="T:KeyToKey.Plugins.IvJoyButtonWithMapping">
            <summary>
            DirectInputのマッピングの設定を使用してvJoyのボタンを操作します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IvJoyButtonWithMapping.State">
            <summary>
            ボタンの状態を設定します。true は押した状態、falseは離した状態です。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IvJoyButtonWithMapping.Down(System.Int32)">
            <summary>
            押す
            </summary>
            <param name="waitTimeAfterDown">押した後の待機時間（ミリ秒）</param>
        </member>
        <member name="M:KeyToKey.Plugins.IvJoyButtonWithMapping.Up(System.Int32)">
            <summary>
            離す
            </summary>
            <param name="waitTimeAfterUp">離した後の待機時間（ミリ秒）</param>
        </member>
        <member name="M:KeyToKey.Plugins.IvJoyButtonWithMapping.Tap(System.Int32,System.Int32)">
            <summary>
            押して離します。
            </summary>
            <param name="waitTimeAfterDown">押した後の待機時間（ミリ秒）</param>
            <param name="waitTimerAfterUp">離した後の待機時間（ミリ秒）</param>
        </member>
        <member name="T:KeyToKey.Plugins.IvJoyStickWithMapping">
            <summary>
            DirectInputのマッピングの設定を使用してvJoyの軸系を操作します。
            </summary>
        </member>
        <member name="M:KeyToKey.Plugins.IvJoyStickWithMapping.SetValue(System.Double,System.Double)">
            <summary>
            スティックの値を設定します。
            </summary>
            <param name="horizontal">横の値（[左]-1.0 ～ [無]0.0 ～ [下]1.0）</param>
            <param name="vertical">縦の値（[上]-1.0 ～ [無]0.0 ～ [下]1.0）</param>
        </member>
        <member name="M:KeyToKey.Plugins.IvJoyStickWithMapping.SetValueByAngle(System.Double,System.Double)">
            <summary>
            スティックの値を角度と半径から設定します。
            </summary>
            <param name="angle">角度</param>
            <param name="radius">半径（0.0～1.0）</param>
        </member>
        <member name="M:KeyToKey.Plugins.IvJoyStickWithMapping.SetDirection(KeyToKey.Plugins.StickDirections,System.Double)">
            <summary>
            スティックの値を方向と半径から設定します。
            </summary>
            <param name="direction">方向</param>
            <param name="radius">半径（0.0～1.0）</param>
        </member>
        <member name="M:KeyToKey.Plugins.IvJoyStickWithMapping.Neutral">
            <summary>
            スティックをニュートラルにします。
            </summary>
        </member>
        <member name="T:KeyToKey.Plugins.IvJoyTriggerWithMapping">
            <summary>
            DirectInputのマッピングの設定を使用してvJoyのトリガーを操作します。
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IvJoyTriggerWithMapping.Value">
            <summary>
            トリガーの値（0.0～1.0）を設定します。マッピング先がボタンの場合：[離す]0.0, [押す]0.0より大きい値:
            </summary>
        </member>
        <member name="P:KeyToKey.Plugins.IvJoyTriggerWithMapping.IsMappingToButton">
            <summary>
            マッピング先がボタンかどうかを取得します。
            </summary>
        </member>
    </members>
</doc>
